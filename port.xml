<?xml version="1.0" encoding="UTF8"?>
<Export generator="Cache" version="25">
<Class name="Port.Logger">
<Super>%RegisteredObject</Super>
<TimeCreated>64306,37945.966346</TimeCreated>

<Property name="LogLevel">
<Type>%Integer</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>logLevel:%Integer=2</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..LogLevel = logLevel
  quit $$$OK
]]></Implementation>
</Method>

<Method name="Log">
<FormalSpec>message:%String,messageLogLevel=2,params...:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ..LogLevel = -1 set ..LogLevel = 0
  #define CRLF $char(13, 10)
  
  if '$data(params) set params = 0  
  
  set msg = message
  
  if messageLogLevel <= ..LogLevel {
    for i=1:1:params {
      set msg = $replace(msg, "{P"_i_"}", params(i))
    }
    set msg = $replace(msg, "[nl]", $$$CRLF)
    write msg
  }
]]></Implementation>
</Method>
</Class>


<Routine name="Port" type="MAC" languagemode="0"><![CDATA[
Install
  do ##class(Port.SourceControl.Installer).Install()
  quit

Wizard
  do ##class(Port.SourceControl.Wizard).Start()
  quit
]]></Routine>


<Class name="Port.Project.Backup">
<Super>%RegisteredObject</Super>
<TimeCreated>64306,37561.640431</TimeCreated>

<Property name="BackupDirectory">
<Type>%String</Type>
<Internal>1</Internal>
<Private>1</Private>
</Property>

<Property name="Logger">
<Type>Port.Project.Importer</Type>
</Property>

<Property name="IsRequired">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ImportList">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Method name="%OnNew">
<FormalSpec>backupDir:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..BackupDirectory = backupDir
  quit $$$OK
]]></Implementation>
</Method>

<Method name="Create">
<FormalSpec><![CDATA[&list:%String=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   
  set sc = $$$OK
  set itemName = ""
  set backupCount = 0
  set appPath = $System.CSP.GetDefaultApp($namespace)
  set appPath = $extract(appPath, 2, *)
  set backupFolderIsCreated = 0
  
  if '..IsRequired quit $$$OK
  
  do ..Logger.Log("Starting backup ... [nl]DO NOT INTERRUPT THIS PROCESS![nl]", 1)
  do ..Logger.Log("Mirroring structure to temporary directory ... ", 1)
  
  do Scan(9,  "CSR", .created)
  do Scan(10, "CSP", .created)
  
  if $$$ISOK(sc) do ..Logger.Log(" done.", 1)
  else  do ..Logger.Log(" done with errors!", 1)
  do ..Logger.Log("[nl][nl]", 1)
  quit sc  


Scan(group, type, created)
  set itemName = ""
  set created  = 0   
  for {
    set itemName = $order(list(group, type, itemName), 1, paths)
    quit:itemName=""
    
    set backupOrigin = $listget(paths, 2)
    set newVersion = $listget(paths, 1)
    // TODO: Add extra check to avoid backing up files that are not really outdated.
    // Don't backup or remove anything if target file is not present in the project
    // or doesn't exists in the app.
    if '(##class(%File).Exists(backupOrigin) && ##class(%File).Exists(newVersion)) {
      continue
    }
    set backupDestination = ##class(%File).NormalizeFilename(..BackupDirectory_"/"_$replace(itemName, appPath, ""))
    set parentBackupDirectory = ##class(%File).GetDirectory(backupDestination)
    set sc = ##class(Port.Project.Helper).ImplyDirectoryCreation(parentBackupDirectory)
    if $$$ISERR(sc) quit
    
    set created = 1    
    set isCopied = ##class(%File).CopyFile(backupOrigin, backupDestination, 1)
    set isDeleted = ##class(%File).Delete(backupOrigin)
    if isCopied = 0 || (isDeleted = 0) {
      set sc = $$$ADDSC(sc, $$$ERROR($$$GeneralError, "Unable to copy "_itemName_" to backup destination. Aborting."))
    }   
  }
  if 'created {
    set ..IsRequired = 0
  }
]]></Implementation>
</Method>
</Class>


<Class name="Port.Project.Base">
<IncludeCode>portutils</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>64306,34528.425857</TimeCreated>

<Property name="Logger">
<Type>Port.Logger</Type>
<Private>1</Private>
</Property>

<Property name="ProjectName">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="Project">
<Type>%Studio.Project</Type>
<Private>1</Private>
</Property>

<Property name="Slash">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="BasePath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="IncPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="ClassPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="IntPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="MacPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="WebPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="MvbPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="MviPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="BasPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="DfiPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="AffectedCount">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="IsBatch">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Overwrite">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="LogLevel">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="SourceExtension">
<Type>%String</Type>
<InitialExpression>"txt"</InitialExpression>
</Property>

<Property name="IgnoredPaths">
<Type>%String</Type>
<Collection>list</Collection>
</Property>

<Method name="%OnNew">
<FormalSpec>target:%String,logLevel:%Integer=2,sourceExtension=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if target = "" {
    throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001, "No target specified."))
  }
  
  set ..Slash = $select($$$isWINDOWS : "\", 1: "/")
  
  if (target [ "/") || (target [ "\") {
    set fullProjectPath = ##class(%File).NormalizeFilename(target)  
    set ..ProjectName = $piece(fullProjectPath, ..Slash, *)        
    set ..BasePath = ##class(%File).NormalizeFilename(fullProjectPath)
    set ..Project = ##class(%Studio.Project).%OpenId(..ProjectName)
    set ..Logger = ##class(Port.Logger).%New(logLevel)
    set ..SourceExtension = sourceExtension
    do ..BuildTypePaths(..BasePath)
    quit $$$OK 
  }
  quit $$$ERROR(5001, "Cannot use invalid or relative paths: an absolute path is required.")
]]></Implementation>
</Method>

<Method name="WriteExclusive">
<FormalSpec>logLevel:%Integer,message:%String,params...:%String</FormalSpec>
<Implementation><![CDATA[
  if ..Logger.LogLevel '= logLevel quit
  do ..Write(message, logLevel, params...)
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>message:%Boolean,logLevel:%Integer=1,params...:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[  do ..Logger.Log(message, logLevel, params...)
]]></Implementation>
</Method>

<Method name="GetProjectName">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  quit ..ProjectName
]]></Implementation>
</Method>

<Method name="Ignore">
<FormalSpec>ignoredPaths:%ArrayOfDataTypes=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK  
  
  if '$isobject(ignoredPaths) quit sc
  if 'ignoredPaths.%IsA("%Collection.AbstractList") {
    quit $$$ERROR($$$BadParameter, "ignoredPaths")
  }  
  
  for i=1:1:ignoredPaths.Count() {
    set absolutePath = ##class(%File).NormalizeFilename(..BasePath_"/"_ignoredPaths.GetAt(i))
    set sc = ..IgnoredPaths.Insert(absolutePath)
    if $$$ISERR(sc) quit
  }
  quit sc
]]></Implementation>
</Method>

<Method name="IsIgnored">
<FormalSpec>maybeIgnoredPath:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  
  set key = ""
  set isIgnored = 0
  
  for i=1:1:..IgnoredPaths.Count() {
    set path = ..IgnoredPaths.GetAt(i)
    set isIgnored = ((path = maybeIgnoredPath) || (maybeIgnoredPath [ path))
    if isIgnored quit
  }
  quit isIgnored
]]></Implementation>
</Method>

<Method name="ResolvePathType">
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>itemType:%String,itemName:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  #define Normalize(%path)    ##class(%File).NormalizeFilename(%path)
  
  if itemType = "CLS" quit ..ClassPath
  if itemType = "INT" quit ..IntPath
  if itemType = "INC" || (itemType = "MAC" && ($piece(itemName, ".", 2) = "INC")) {
    // InterSystems groups INC into MAC type, so we patch it checking the name instead.
    quit ..IncPath
  }
  if itemType = "MAC" quit ..MacPath
  if itemType = "CSP" quit ..WebPath
  if itemType = "MVB" quit ..MvbPath
  if itemType = "MVI" quit ..MviPath  
  if itemType = "BAS" quit ..BasPath
  if itemType = "DFI" quit ..DfiPath
  quit ""
]]></Implementation>
</Method>

<Method name="BuildTypePaths">
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>workingDirectory:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #define BuildTypedPath(%type) $lts($lb(workingDirectory, %type), ..Slash)
  
  set ..ClassPath = $$$BuildTypedPath("cls")
  set ..IntPath   = $$$BuildTypedPath("int")
  set ..MacPath   = $$$BuildTypedPath("mac") 
  set ..IncPath   = $$$BuildTypedPath("inc")
  set ..WebPath   = $$$BuildTypedPath("web")  
  set ..MvbPath   = $$$BuildTypedPath("mvb")
  set ..MviPath   = $$$BuildTypedPath("mvi")
  set ..BasPath   = $$$BuildTypedPath("bas")  
  set ..DfiPath   = $$$BuildTypedPath("dfi")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="NormalizeOutput">
<FormalSpec>itemName:%String,*path:%String="",*extension:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
  set extension = ##class(Port.Project.Helper).GetItemExtension(itemName)
  set dest = ""
  
  // Package.Class.Name -> cls/Package/Class/Name.cls.txt
  if extension = "CLS" {
    set classBasePath = ..ResolvePathType("CLS")
    set classItemName = $piece(itemName, ".", 1, *-1)
    set classPath = $listtostring($listbuild(classBasePath, $replace(classItemName, ".", ..Slash)), ..Slash)
    set packagePath = $piece(classPath, ..Slash, 1, *-1)
    set className = $piece(classPath, ..Slash, $length(classPath, ..Slash))
    set dest = classPath_".cls"_..GetSourceExtension()
    set path = packagePath
  }
  
  // Routine.(type) -> /(type)/routine.(type).txt
  elseif ##class(Port.Project.Helper).IsRoutine(itemName) {    
    set type = $$$ucase($piece(itemName, ".", *))
    set path = ..ResolvePathType(type, itemName)
    set dest = path_..Slash_itemName
    set extPos = $length(dest, ".")
    set $piece(dest, ".", extPos) = $$$lcase($piece(dest, ".", extPos))_..GetSourceExtension()
  }
  
  // /csp/path/to/somefile.(*) -> /web/path/to/somefile.(*).txt
  else {
    set appPath = $System.CSP.GetDefaultApp($namespace)
    set baseTypePath = ..ResolvePathType("CSP")
    set ext = $$$lcase($piece(itemName, ".", *))
    set fileWithoutExtension = $piece(itemName, ".", 1, *-1)
    set dest = ##class(%File).NormalizeFilename(baseTypePath_..Slash_$piece(fileWithoutExtension, "/", 3, *))_"."_ext
    set path = ##class(%File).GetDirectory(dest) 
  }
  quit dest
]]></Implementation>
</Method>

<Method name="CheckUbiquity">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[projectName:%String,&ubiquityList:%String=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set (name, type, projects) = ""
  
  set sProjects = ##class(%SQL.Statement).%New()
  $$$QuitOnError(sProjects.%PrepareClassQuery("%Studio.Project", "ProjectList"))   
  set projectRows = sProjects.%Execute()
  
  set sProjectItems = ##class(%SQL.Statement).%New()
  $$$QuitOnError(sProjectItems.%PrepareClassQuery("%Studio.Project", "ProjectItemsList"))
  set projectItemsRows = sProjectItems.%Execute(projectName)
  
  while projectRows.%Next(.sc) {
    if $$$ISERR(sc) quit
    set currentProject = projectRows.%Get("Name")
    if projectName '= currentProject {
      set projects(projectName) = ""     
    }
  }
  
  while projectItemsRows.%Next(.sc) {
    if $$$ISERR(sc) quit
    set id = projectItemsRows.%Get("ID")
    set type = projectItemsRows.%Get("Type")    
    set name = projectItemsRows.%Get("Name")
    set candidateId = id
    set candidateProject = ""
    for {      
      set candidateProject = $order(projects(candidateProject))
      quit:candidateProject=""
      set candidateId = id
      set $piece(candidateId, "||", 1) = candidateProject
      if ##class(%Studio.ProjectItem).%ExistsId(candidateId) {
        set ubiquityList = ubiquityList + 1
        set ubiquityList(candidateId) = $listbuild(name, type)
      } elseif type = "CLS" {
        set class = ""
        set parts = $length(name, ".")
        set $piece(candidateId, "||", 3) = "PKG"
        for i=parts:-1:1 {
          set class = $piece(name,  ".", 1, i)
          set $piece(candidateId, "||", 2) = class
          if ##class(%Studio.ProjectItem).%ExistsId(candidateId) {
            set ubiquityList = ubiquityList + 1
            set ubiquityList(candidateId) = ""
            quit
          }
        }
      }
    }    
  }
]]></Implementation>
</Method>

<Method name="IsOutdated">
<FormalSpec>current:%String,external:%String,isImport:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  
  if '##class(%File).Exists(external) quit 1 
  set externalTS = $zdt(##class(%File).GetFileDateModified(##class(%File).NormalizeFilename(external)), 3,,,,,,,,,0)
    
  if externalTS < 0 quit 1
  set lastModified = 0  
  
  set projectTS = ##class(Port.SourceControl.Log).GetLastChange(..GetProjectName(), ..GetProjectName()_".PRJ")
  set currentDate = ##class(Port.SourceControl.Log).GetLastChange(..GetProjectName(), current)
  
  if currentDate = 0 set lastModified = projectTS
  else  set lastModified = $select(currentDate ] projectTS : currentDate, 1: projectTS)
      
  if ##class(Port.Project.Helper).IsRoutine(current) || 
    (##class(Port.Project.Helper).GetItemExtension(current) = "CLS") {
    set currentTS = $piece(##class(%RoutineMgr).TS(current, .compileTime), ".")
  } else {
    if 'isImport {
      set fullSourcePath = ##class(%File).NormalizeFilename(current, $System.Util.InstallDirectory())
    } else {
      do ##class(Port.Project.Helper).CSPLogicalToPhysicalPath(current, .fullSourcePath)
      //set fullSourcePath = ##class(Port.Project.Helper).CSPLogicalToPhysical(current)
    }
    set currentTS = $zdatetime(##class(%File).GetFileDateModified(fullSourcePath), 3,,,,,,,,,0)
    // If the file is missing it's considered outdated as well.
    if currentTS = 0 quit 1
  }   
  
  // Same date for both entries? Then consider updated.
  if currentTS = externalTS quit 0
  if 'isImport {  
    quit (
      (currentTS ] externalTS) && 
      (currentTS ] lastModified)
    )
  }
  quit (
    (externalTS ] currentTS) && 
    (externalTS ] lastModified)
  )
]]></Implementation>
</Method>

<Method name="IsProjectMember">
<Internal>1</Internal>
<FormalSpec>name:%String,*isProjectMember:%Boolean,type:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..Project.NormalizeName(.name, .type))
  set id = ..ProjectName_"||"_name_"||"_type
  set isProjectMember = (..Project.Items.FindObjectId(id) '= "")
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSourceExtension">
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  quit $select(..SourceExtension '= "" : "."_..SourceExtension, 1: "")
]]></Implementation>
</Method>
</Class>


<Class name="Port.Project.Exporter">
<Super>Port.Project.Base</Super>
<TimeCreated>64306,34528.610794</TimeCreated>

<Property name="PathDependencies">
<Type>%String</Type>
<Collection>array</Collection>
<Private>1</Private>
</Property>

<Property name="ExportedPackages">
<Type>%List</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>path:%String,logLevel:%Integer=2,sourceExtension:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(##super(path, logLevel, sourceExtension))  
       
  if '$isobject(..Project) {    
    set ..ProjectName = "null"
    throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR(5001, "Invalid project name ("_..ProjectName_")."))
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="Export">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ..Project.Items.Count() = 0 {
    do ..Write("[nl]No items to export. Aborting ... [nl]", 0)
    quit $$$OK
  }  
  
  set ..IsBatch = 1
  do ..Reset()
  
  do ..Write("[nl]Exporting project {P1} ...[nl]", 0, ..Project.Name)
  set cspDirectory = ##class(%File).NormalizeFilename($System.Util.InstallDirectory()_"csp/"_$$$lcase($namespace))
  
  $$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(cspDirectory))
  $$$QuitOnError(..ExportProjectItems(.exportList))
  
  if ..AffectedCount > 0 {
    do ..Write("[nl]Files were exported to path {P1}.", 0, ..BasePath)
  } else {
    do ..Write("[nl]No files were exported, project {P1} might be empty or repository is up-to-date.", 0, ..Project.Name)
  }
  
  do ..Write("[nl]Synchronizing ...", 0)
  $$$QuitOnError(..PurgeExtraneousEntries())
  
  do ..Write("[nl]All done.[nl]", 0)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="SearchExtraneousEntries">
<FormalSpec><![CDATA[statement:%SQL.Statement,path:%String,&files:%List=""]]></FormalSpec>
<Implementation><![CDATA[
   
  set dir = ##class(%File).NormalizeDirectory(path)
  set row = statement.%Execute(dir)
  set sc = $$$OK
  
  while row.%Next(.sc) {
    if $$$ISERR(sc) quit
    set type = row.%Get("Type")    
    set fullPath = row.%Get("Name")     
    
    if ..IsIgnored(fullPath) continue
            
    if type = "D" {      
      set sc = ..SearchExtraneousEntries(statement, fullPath, .files)
      if $$$ISERR(sc) quit
    } 
    
    if '..PathDependencies.IsDefined(fullPath) {
      set length = $case(files, "": 1, : $listlength(files)+1)
      set $list(files, length) = $listbuild(fullPath, type)            
    }
  }
  quit sc
]]></Implementation>
</Method>

<Method name="PurgeExtraneousEntries">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set s = ##class(%SQL.Statement).%New()
  $$$QuitOnError(s.%PrepareClassQuery("%File", "FileSet"))
  set removedDirectories = ""
  set lastParent = ""
  set parentDirectory = ""
  
  do ..Write("[nl]Checking for extraneous files or directories ...")
  
  for ipath = ..MacPath,..IntPath,..IncPath,..ClassPath,..BasPath,..WebPath,..MvbPath,..MviPath,..DfiPath {
    set sc = ..SearchExtraneousEntries(s, ipath, .extraneousFiles)
    if $$$ISERR(sc) quit
  }
  
  $$$QuitOnError(sc)
  
  set length = $listlength(extraneousFiles)
  if length > 0 do ..Write("[nl]Found {P1} extraneous item{P2}.[nl]", 1, length, $case(length, 1: "", : "s"))
  else  do ..Write("[nl]No extraneous items were found.[nl]", 1)
  
  for i=1:1:length {
    set possiblyDeleted = 0
    set extraneousItem = $listget(extraneousFiles, i)
    set path = $listget(extraneousItem, 1)
    set type = $listget(extraneousItem, 2)
    if parentDirectory '= "" && (path [ parentDirectory) set possiblyDeleted = 1
    if type = "F" && ##class(%File).Exists(path) {
      set fileName = ##class(%File).GetFilename(path)
      set lastNode = ##class(%File).GetDirectoryPiece(parentDirectory, $length(parentDirectory, ..Slash))
      set fileName = $piece(fileName, ".", 1)           
      if fileName = lastNode set possiblyDeleted = 0 
      if possiblyDeleted = 1 continue
      do ..Write("Removing file {P1}.[nl]", 2, path)
      do ##class(%File).Delete(path)        
    } elseif type = "D" {
      if parentDirectory = "" || (path '[ parentDirectory) {
        set lastParent = parentDirectory
        set parentDirectory = $replace(path, ##class(%File).GetDirectoryPiece(path, $length(path, ..Slash))_..Slash, "")
        if lastParent = "" set lastParent = parentDirectory
      }
      if possiblyDeleted = 1 continue
      do ..Write("Removing directory {P1}.[nl]", 2, path)
      do ##class(%File).RemoveDirectoryTree(path)
    }
  } 
  if length > 0 {
    do ..Write("{P1} extraneous item{P2} removed.[nl]", 1, length, $case(length, 1: " was", : "s were"))
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ExportProjectItems">
<Internal>1</Internal>
<FormalSpec><![CDATA[&exportList:%List=""]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set s = ##class(%SQL.Statement).%New()
  $$$QuitOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectItemsList"))
  set r = s.%Execute(..ProjectName, 1) 
  while r.%Next(.sc) {
    if $$$ISERR(sc) quit
    set itemName = r.%Get("Name")
    set itemType = r.%Get("Type")
    set sc = $$$ADDSC(sc, ..ExportItem(itemName, itemType, .exportList))
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ExportItem">
<FormalSpec><![CDATA[itemName:%String,type:%String="",&exportList:%List=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ##class(Port.Project.Helper).IsRoutine(itemName) quit ..ExportRoutine(itemName)
  
  set itemType = $case(type, "": ##class(Port.Project.Helper).GetItemExtension(itemName), : type)
  
  if itemType = "CSP" quit ..ExportWebFile(itemName, .exportList)
  if itemType = "PKG" quit ..ExportPackage(itemName, .exportList)
  if itemType = "CLS" {
    set className = itemName
    set classLength = $length(itemName, ".")
    if $piece(itemName, ".", classLength) = "CLS" {
      set className = $extract(itemName, 1, $length(itemName) - 4)
    } 
    quit ..ExportClass(className, .exportList)
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportPackage">
<FormalSpec>packageName:%String,exportList:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $listfind(i%ExportedPackages, packageName) quit $$$OK  
  
  set classList = $System.OBJ.GetPackageList(.classList, packageName)
  set className = ""
  set sc = $$$OK
  for {
    set className = $order(classList(className))
    quit:className=""
    set err = ..ExportClass(className)
    if $$$ISERR(err) {
      if $$$ISOK(sc) set sc = err
      else  set sc = $$$ADDSC(sc, err)
    }
  }
  set $list(exportList, *+1) = "cls/"_packageName
  set $list(i%ExportedPackages, *+1) = packageName
  quit sc
]]></Implementation>
</Method>

<Method name="ExportWebFile">
<FormalSpec><![CDATA[itemName:%String,&exportList:%List=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set name = itemName
  
  if $extract(itemName, 1) = "/" {
    set name = $extract(itemName, 2, *)
  }
  
  if '##class(%Studio.ProjectItem).%ExistsId(..Project.Name_"||"_name_"||CSP") {
    quit $$$OK
  } 
      
  $$$QuitOnError(##class(Port.Project.Helper).CSPLogicalToPhysicalPath(name, .source))
  set dest = ..NormalizeOutput(name, .path, .ext)  
  
  $$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(path))  
  do ..ExtractPathDependency(source, dest)
  
  if ..Overwrite = 0 && '..IsOutdated(source, dest) {
    quit $$$OK
  }
     
  do ..Write("Exporting {P1} ...", 1, name)
  
  set exported = ##class(%File).CopyFile(source, dest)
  if exported = 0 {
    do ..Write(" failed![nl]", 1)
    quit $$$ERROR($$$GeneralError, "Unable to copy source "_source_" to destination "_dest_".")
  }
  
  do ..Write(" done.[nl]", 1)
  set ..AffectedCount = ..AffectedCount + 1
  
  set $list(exportList, *+1) = dest  
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportRoutine">
<FormalSpec>name:%String,exportList:%List=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ##class(Port.Project.Helper).Describe(name, .extension, .type, .itemName) 
  
  if '##class(%Studio.ProjectItem).%ExistsId(..Project.Name_"||"_itemName_"||"_type) {
    quit $$$OK
  }

  set dest = ..NormalizeOutput(name, .path)  
  do ..ExtractPathDependency(name, dest)
  
  $$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(path))
    
  if '##class(%RoutineMgr).Exists(name) { 
    quit $$$ERROR($$$GeneralError, "Unable to export "_name_": routine does not exist.")
  }
  
  if ..Overwrite = 0 && '..IsOutdated(name, dest) {
    quit $$$OK
  }
  
  do ..Write("Exporting {P1} ...", 1, itemName)
  
  set file = ##class(%FileCharacterStream).%New()
  set file.Filename = dest
  
  set routine = ##class(%RoutineMgr).%OpenId(name)  
  set sc = file.CopyFrom(routine.Code)
  
  if $$$ISOK(sc) do ..Write(" done.[nl]", 1)
  else  do ..Write(" failed![nl]", 1) quit sc
    
  set $list(exportList, *+1) = dest
  
  $$$QuitOnError(file.%Save())
  
  set ..AffectedCount = ..AffectedCount + 1
  quit $$$OK
]]></Implementation>
</Method>

<Method name="IsClassProjectItem">
<FormalSpec>itemName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  
  set exists = ##class(%Studio.ProjectItem).%ExistsId(..ProjectName_"||"_itemName_"||CLS")
  if 'exists {
    set classPartsLength = $length(itemName, ".")
    for i=1:1:classPartsLength - 1 {
      set exists = ##class(%Studio.ProjectItem).%ExistsId(..ProjectName_"||"_$piece(itemName, ".", 1, i)_"||PKG")
      if exists quit      
    }
  }
  quit exists
]]></Implementation>
</Method>

<Method name="ExportClass">
<FormalSpec><![CDATA[itemName:%String,&exportList:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set package = $piece(itemName, ".", 1, *-1)
  set isProjectItem = ..IsClassProjectItem(itemName)
  
  if $listfind(..ExportedPackages, package) quit $$$OK
  
  if 'isProjectItem {
    quit $$$OK
  }
  
  set dest = ..NormalizeOutput(itemName_".CLS", .path)
  
  $$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(path))  
  do ..ExtractPathDependency(itemName, dest)
  
  if ..Overwrite = 0 && '..IsOutdated(itemName_".CLS", dest) {
    quit $$$OK
  }
  
  do ..Write("Exporting class {P1} ...", 1, itemName)
  if '##class(%ClassDefinition).%ExistsId(itemName) {
    do ..Write(" failed![nl]", 1)
  } 
  $$$QuitOnError(##class(%Compiler.UDL.TextServices).GetTextAsFile($namespace, itemName, dest))
  do ..Write(" done.[nl]", 1)
  
  set ..AffectedCount = ..AffectedCount + 1
  set $list(exportList, *+1) = dest
  
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ExtractPathDependency">
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>itemName:%String,destPath:%String</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  set type = $$$ucase($piece(destPath, ".", $length(destPath, ".") - 1, $length(destPath, ".") - 1)) 
  set basePath = ..ResolvePathType(type)
  if $find($listbuild("", "/"), $extract(basePath)) {
    set basePath = $extract(basePath, 2, *)
  }
    
  set absoluteBasePath = ##class(%File).NormalizeFilename(basePath, ..Slash)
  set dirLength = $length(destPath, ..Slash)
  set dirLengthLimit = dirLength - (dirLength - $length(absoluteBasePath, ..Slash))
  
  // Slices the path for every iteration. Ex: /a/b/c -> /a/b -> /a
  for i=dirLength:-1:dirLengthLimit+1 {
    set dir = $piece(destPath, ..Slash, 1, i)    
    if ..PathDependencies.IsDefined(dir) quit
    do ..PathDependencies.SetAt(itemName, dir)
  }
]]></Implementation>
</Method>

<Method name="Reset">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set i%ExportedPackages = ""
  do ..PathDependencies.Clear()
]]></Implementation>
</Method>
</Class>


<Class name="Port.Project.Helper">
<Abstract>1</Abstract>
<TimeCreated>64306,34528.510985</TimeCreated>

<Method name="ImplyDirectoryCreation">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set isCreated = 1
  if '##class(%File).DirectoryExists(path)  {
    set isCreated = ##class(%File).CreateDirectoryChain(path)
    if isCreated = 0 {      
      quit $$$ERROR(5001, "Unable to create path: "_##class(%File).NormalizeFilename(path))
    }
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="IsRoutine">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String,onlyCompilables:%Boolean=0</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  set extension = ..GetItemExtension(itemName)
  
  if extension = "MAC"  || (extension = "INT") ||
    (extension = "MVB") || (extension = "MVI") || 
    (extension = "BAS") || (extension = "INC") ||
    (extension = "DFI") {
    quit 1
  }  
  quit 0
]]></Implementation>
</Method>

<Method name="GetItemExtension">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set ext = $piece(itemName, ".", *)
  quit $$$ucase(ext)
]]></Implementation>
</Method>

<Method name="CSPLogicalToPhysicalPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>cspItem:%String,*absolutePath:%String="",namespace:%String=$namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set installDirectory = $System.Util.InstallDirectory()
  set cspAppDirectory = $System.CSP.GetDefaultApp(namespace)
  if cspAppDirectory = "" quit $$$ERROR($$$GeneralError, "Unable to retrieve the physical path for the namespace '"_$namespace_"': web application or namespace doesn't exists.")
  set cspAppDirectory = $extract(cspAppDirectory, 2, *)
  set absolutePath = ##class(%File).NormalizeFilename($replace(cspItem, cspAppDirectory, installDirectory_"csp/"_$$$lcase($namespace)))
  quit $$$OK
]]></Implementation>
</Method>

<Method name="FileToClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,extension:%String=##class(Port.SourceControl.Config).GetSourceExtension()</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set slash = $select($$$isWINDOWS : "\", 1: "/")
  set normalizedPath = ##class(%File).NormalizeFilename(path)
  set fileName = ##class(%File).GetFilename(normalizedPath)
  set extSize = $length($select(extension = "" : $piece(fileName, ".", *), 1: ".cls"_extension)) 
  set contextPath = $extract(normalizedPath, $find(normalizedPath, slash_"cls") + 1, ($length(normalizedPath) - 1) - extSize)  
  quit $replace(contextPath, slash, ".")
]]></Implementation>
</Method>

<Method name="ClassToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>basePath:%String,className:%String,extension:%String=##class(Port.SourceControl.Config).GetSourceExtension()</FormalSpec>
<Implementation><![CDATA[
 
  set divider = $select($$$isWINDOWS : "\", 1: "/")
  if extension '= "" set extension = "."_extension
  quit ##class(%File).NormalizeFilename(basePath_"/"_$replace(className, ".", divider)_".cls"_extension)
]]></Implementation>
</Method>

<Method name="Describe">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,*extension:%String,*itemType:%String,*itemName:%String</FormalSpec>
<Implementation><![CDATA[
   
  set nameOnly = $piece(name, ".", 1, *-1)  
  set routines = $listbuild("MAC", "INT", "INC", "MVB", "MVI", "BAS", "DFI")
  set extension = ..GetItemExtension(name)

  if ..IsRoutine(name) {
    set itemType = extension
    if extension = "INC" || 
      (extension = "BAS") || 
      (extension = "MVI") || 
      (extension = "INT") {
      set itemType = "MAC"
    }
    set itemName = nameOnly_"."_extension  
  } elseif extension = "CLS" {
    set itemName = nameOnly  
    set itemType = extension
  } else {
    set itemName = name
    set itemType = "CSP"
  }
]]></Implementation>
</Method>

<Method name="CSPPhysicalToLogicalPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>physicalPath:%String,*logicalPath:%String,namespace:%String=$namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set slash = $select($$$isWINDOWS : "\", 1: "/")  
  set installDir = $System.Util.InstallDirectory()
  set webFilePath = $extract(physicalPath, $find(physicalPath, slash_"web"_slash), *)
  if '$find(##class(%File).NormalizeFilename(physicalPath), slash_"web"_slash) {
    quit $$$ERROR($$$GeneralError, "Invalid physical path: parameter doesn't correspond to the /web/ path.")
  }
  set cspAppPath = $System.CSP.GetDefaultApp(namespace)  
  if cspAppPath = "" quit $$$ERROR($$$GeneralError, "Unable to retrieve to logical path for the namespace '"_$namespace_"': web application or namespace doesn't exists.")
  if $extract(cspAppPath, *) '[ "/" set cspAppPath = cspAppPath_"/"
  set logicalPath = $extract(cspAppPath, 2, *)_$replace(webFilePath, "\", "/")
  quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Port.Project.Importer">
<Super>Port.Project.Base</Super>
<TimeCreated>64306,34528.722609</TimeCreated>

<Property name="IsNewProject">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="CSPPath">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="Backup">
<Type>Port.Project.Backup</Type>
<Private>1</Private>
</Property>

<Property name="BackupDirectory">
<Type>%String</Type>
<Internal>1</Internal>
</Property>

<Property name="SkipBackup">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ImportList">
<Type>%String</Type>
<InitialExpression>0</InitialExpression>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="ItemsList">
<Type>%String</Type>
<InitialExpression>0</InitialExpression>
<MultiDimensional>1</MultiDimensional>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>inputPath:%String,logLevel:%Integer=2,sourceExtension:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(##super(inputPath, logLevel, sourceExtension))
  
  set installDirectory = $System.Util.InstallDirectory()
  
  set ..CSPPath = ##class(%File).NormalizeFilename(installDirectory_"csp/"_$$$lcase($namespace))  
  set ..BackupDirectory = ##class(%File).NormalizeFilename(..BasePath_"/__backup__/")
  set ..Backup = ##class(Port.Project.Backup).%New(..BackupDirectory)
  set ..Backup.Logger = ..Logger
  
  set i%ImportList = 0
  set i%ItemsList = 0
  
  if '$isobject(..Project) {
    set ..IsNewProject = 1
    set ..Project = ##class(%Studio.Project).%New()
    set ..Project.Name = ..ProjectName
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="EnqueueAll">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ..ResetLists()
  
  set sc = $$$OK
  for i = ..IncPath, ..IntPath, ..ClassPath, ..MacPath, ..BasPath, ..MviPath, ..MvbPath, ..DfiPath, ..WebPath {
    set sc = ..EnqueueDirectory(i)
    if $$$ISERR(sc) quit
  }
  quit sc
]]></Implementation>
</Method>

<Method name="EnqueueItem">
<FormalSpec>target:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set isWebPath = target [ ..WebPath  
  
  set sc = ..Describe(target, isWebPath, .described, .isOutdated, .internalFileName, .itemName, .itemType, .group, .alias)
  $$$QuitOnError(sc)
  
  if described && '$data(i%ItemsList(itemName)) {
    if '..Backup.IsRequired && '..SkipBackup && ((itemType = "CSP") || (itemType = "CSR") && isOutdated) {
      set ..Backup.IsRequired = 1
    }
    set i%ItemsList = $increment(i%ItemsList)
    set i%ItemsList(itemName) = ""  
        
    if isOutdated || ..Overwrite {
      set i%ImportList = $increment(i%ImportList)
      set i%ImportList(group, itemType, alias) = $listbuild(target, internalFileName)
    }    
    set enqueued = 1
  } 
  quit enqueued
]]></Implementation>
</Method>

<Method name="EnqueueDirectory">
<FormalSpec>searchPath:%String,fs:%SQL.Statement=$$$NULLOREF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  if '..IsBatch && '$isobject(fs) {
    do ..ResetLists()
  }
  
  if ..IsIgnored(searchPath) quit $$$OK
  
  if '$isobject(fs) {
    set fs = ##class(%SQL.Statement).%New()
    $$$QuitOnError(fs.%PrepareClassQuery("%File", "FileSet"))
  }
  
  set sc = $$$OK
  set rows = fs.%Execute(searchPath)  
  
  while rows.%Next(.sc) {
    if $$$ISERR(sc) quit 
    set compilable = 0
    set type = rows.%Get("Type")
    set external = rows.%Get("Name")
    if type = "F" { 
      set sc = ..EnqueueItem(external) 
      if $$$ISERR(sc) quit
    } elseif type = "D" {
      set targetDir = $piece(external, ..Slash, *)
      if '(targetDir?1".".AN) {
        set sc = ..EnqueueDirectory(external, fs)
        if $$$ISERR(sc) quit
      }
    }   
  }
  quit sc
]]></Implementation>
</Method>

<Method name="GetTypePriority">
<Internal>1</Internal>
<FormalSpec>type:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
  if type = ".INC" quit 1
  if type = ".INT" quit 2
  if type = ".CLS" quit 3
  if type = ".MAC" quit 4
  if type = ".MVI" quit 5
  if type = ".MVB" quit 6
  if type = ".BAS" quit 7
  if type = ".DFI" quit 8
  if type = ".CSR" quit 9
  quit 10
]]></Implementation>
</Method>

<Method name="Describe">
<Internal>1</Internal>
<FormalSpec>origin:%String,isWebPath:%Boolean=0,described:%Boolean=0,*isOutdated:%Boolean=0,*itemDestination:%String,*itemName:%String,*itemType:%String,*priority:%String,*alias:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set described = 0 
  set extension = ..GetFileExtension(origin, isWebPath)
  set extSize = $length(..GetSourceExtension())
  
  if 'isWebPath $$$QuitOnError(..AssertValidExtension(origin))
  
  if '(extension?1".".AN) quit described
  if extension = "" quit described  
    
  set priority = ..GetTypePriority(extension)
  
  if extension = ".CLS" {
    set itemType = "CLS"
    set itemDestination = ##class(Port.Project.Helper).FileToClass(origin)      
    set itemName = itemDestination_extension
    set alias = itemDestination
    set described = 1
  } elseif $listfind($$$RoutineExtensions, extension) {
    set itemType = $piece(extension, ".", 2)    
    set itemDestination = $extract(##class(%File).GetFilename(origin), 1, *-(4 + extSize))_extension
    set itemName = itemDestination
    set alias = itemName
    set described = 1
  } else {
    if extension = ".CSR" set itemType = "CSR"
    else  set itemType = "CSP"
    $$$QuitOnError(##class(Port.Project.Helper).CSPPhysicalToLogicalPath(origin, .logicalPath))
    $$$QuitOnError(##class(Port.Project.Helper).CSPLogicalToPhysicalPath(logicalPath, .physicalPath))
    set itemName = logicalPath
    set itemDestination = physicalPath    
    set alias = itemName
    set described = 1
  }
  
  if '..Overwrite {
    set isOutdated = ..IsOutdated(itemName, origin, 1)
  } else {
    set isOutdated = 1
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ImportList">
<Internal>1</Internal>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK  
  
  for i=1:1:10 {
   set sc = ..ImportType(i)
   if $$$ISERR(sc) {
    set typeSC = $$$ERROR($$$GeneralError, "There were errors while importing "_$listget($$$ImportTypeDescriptions, i)_".")
    set typeSC = $$$EMBEDSC(typeSC, sc)
    set sc = typeSC 
   }
  }  
  quit sc
]]></Implementation>
</Method>

<Method name="ImportType">
<Internal>1</Internal>
<FormalSpec>group:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  if '$data(i%ImportList(group)) quit sc  
  
  set partialMessage = $listget($$$ImportTypeDescriptions, group)
  do ..WriteExclusive(1, "Importing {P1} ... ", partialMessage)
  set itemName = ""
  for {
    quit:'$data(i%ImportList(group))
    set itemType = $listget($$$ImportTypes, group, "CSP")
    set itemName = $order(i%ImportList(group, itemType, itemName), 1, paths)
    quit:itemName=""
    
    set origin = $listget(paths, 1)
    set destination = $listget(paths, 2)
    set fileType = itemType    
    
    do ..Write("Importing {P1} ", 2, $case(fileType,
      "CLS": "class "_itemName, 
      "MAC": "macro routine "_itemName, 
      "INT": "intermediate routine "_itemName, 
      "INC": "include routine "_itemName,
      "BAS": "Basic routine "_itemName,
      "MVB": "MV Basic routine "_itemName,
      "MVI": "MV Intermediate routine "_itemName,
      "DFI": "DFI XML "_itemName, :
      "file to "_destination)_" ...")
    set sc = $$$ADDSC(sc, ..ImportFromExternalSource(itemName, origin,  fileType, destination))
    if $$$ISERR(sc)  do ..Write("failed![nl]", 2) continue
    else  do ..Write("done.[nl]", 2)
  }
  do ..WriteExclusive(1, "done.[nl]")
  quit sc
]]></Implementation>
</Method>

<Method name="ImportPartial">
<FormalSpec>target:%String,importedList:%String=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  #define NormalizePath(%path)  ##class(%File).NormalizeFilename(%path)
  set sc = $$$OK
  
  set resolvedTarget = ##class(%File).NormalizeFilename(target, ..BasePath)
  
  if (resolvedTarget = ..BasePath) {
    quit $$$ERROR($$$GeneralError, "Ambiguous TARGET and BASEPATH if you wish to import the project, use the method Import instead.")
  }
  
  if '(resolvedTarget [ ..ClassPath || (resolvedTarget [ ..IncPath) ||
      (resolvedTarget [ ..IncPath)  || (resolvedTarget [ ..MacPath) ||
      (resolvedTarget [ ..WebPath)) {    
    quit $$$ERROR($$$GeneralError, "Action supressed: attempted to import files outside the project scope.")
  }  
  
  if ##class(%File).DirectoryExists(resolvedTarget) {
    do ..Write("[nl]Enqueuing directory to be imported ...", 1)   
    set sc = ..EnqueueDirectory(resolvedTarget)
  } elseif ##class(%File).Exists(resolvedTarget) {
    do ..Write("[nl]Enqueuing item to be imported ...", 1)
    set sc = ..EnqueueItem(resolvedTarget)
  } else {
    do ..Write("[nl]Nothing to import.", 1)
    quit sc
  }
  
  if sc {
    do ..Write(" done.[nl]")
    set sc = ..Import()
    if $$$ISOK(sc) {
      set importedList = i%ImportList
      merge importedList = i%ImportList
    }
  } else {
    do ..Write(" failed.[nl]")
  }  
  quit sc
]]></Implementation>
</Method>

<Method name="Import">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set onlyPopulateProject = 0
  set ..AffectedCount = 0
      
  tstart
  
  try {
    if ..IsBatch {
      do ..Write("[nl][nl]Importing project {P1} ...[nl]", 1, ..Project.Name)            
      do ..Write("[nl]Enqueuing items to import ... ", 1)
      $$$ThrowOnError(..EnqueueAll())
    }
      
    if i%ImportList > 0 {
      do ..Write("[nl]Found {P1} item{P2} to be imported.[nl]", 1, i%ImportList, $select(i%ImportList > 1 : "s", 1: ""))
      merge list = i%ImportList
      if '..SkipBackup $$$ThrowOnError(..Backup.Create(.list))
      $$$ThrowOnError(..ImportList())
    } else {
      do ..Write("[nl]No pending items were found inside the repository.", 1)
      do ..Write("[nl]Current repository might be empty or up-to-date.[nl]", 1)
    }
         
    if ..IsNewProject {
      do ..Write("[nl]Project doesn't exists. A new project will be created with the name {P1}.[nl]", 1, ..Project.Name)
    }
    
    if i%ImportList {
      do ..Write("[nl]Synchronizing {P1} ...", 1, ..Project.Name)
      $$$ThrowOnError(..SynchronizeProject(.added, .removed))
      do ..Write(" done.[nl]")
      do ..Write("[nl]Project {P1} has been saved with a total of {P2} items.", 1, ..Project.Name, ..Project.Items.Count())
    }
    
    set ..AffectedCount = i%ImportList    
    
    if ..Backup.IsRequired && '..SkipBackup {
      // If anything is ok until here, then delete the backup.
      do ..Write("[nl]Removing backup directory ...")
      set isRemoved = ##class(%File).RemoveDirectoryTree(..BackupDirectory)
      if isRemoved { 
        do ..Write(" done.[nl]")
        set ..Backup.IsRequired = 0
      } else  {
        set backupErrorMessage = "Unable to remove the directory "_..BackupDirectory
        do ..Write(" failed! Unable to clear directory.", 1)
        $$$ThrowOnError($$$ERROR(5001, backupErrorMessage))
      }
    }
    tcommit     
  } catch ex {
    set sc = ex.AsStatus()
    do ..Write("[nl][nl]FATAL: There were errors preventing the project to be imported:[nl]", 1)
    do $System.OBJ.DisplayError(sc)
    do ..Write("[nl][nl]The importer will now rollback all changes.[nl]", 1)
    do ..Write("PLEASE DO NOT INTERRUPT THIS PROCESS OR INTEGRITY WILL BE LOST![nl]", 1)
    do ..Write("Rolling back to the last working snapshot ...", 1)

    // Rolls back the database to recover last working Caché files.
    trollback
    do ..Write(" done.[nl]")
    
    if ..Backup.IsRequired {
      do ..Write("Reverting {P1} using backup version ...", 1, $System.CSP.GetDefaultApp($namespace))
      set isCopied = ##class(%File).CopyDir(..BackupDirectory, ..CSPPath, 1)
      if isCopied { do ..Write(" done.[nl]") }
      else {
        do ..Write(" failed![nl]")
        do ..Write("Failed to restore the pending backup due to a file system error, backup will not be removed.")
      }     
    
      if 'isCopied {
        set sc = $$$ADDSC(sc, $$$ERROR(5001, "Failed to restore the pending backup due to a file system error."))
      }
    }
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ImportFromExternalSource">
<Final>1</Final>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String,origin:%String,fileType:%String,destination:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK 
  
  if (fileType = "CLS") {      
    $$$QuitOnError(##class(%Compiler.UDL.TextServices).SetTextFromFile($namespace, itemName, origin))
  } elseif ##class(Port.Project.Helper).IsRoutine(itemName) {
    set routine = ""
    set fs = ##class(%FileCharacterStream).%New()
    set fs.Filename = origin
    
    if ##class(%RoutineMgr).Exists(itemName) {      
      set routine = ##class(%RoutineMgr).%OpenId(itemName)           
    } else {
      set routine = ##class(%RoutineMgr).%New(itemName)
    }
        
    set code = routine.Code
    do code.Clear()
    
    $$$QuitOnError(code.CopyFrom(fs))
    set sc = code.Save()
  } else {
    set destinationPath = ##class(%File).GetDirectory(destination)
    $$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(destinationPath))    
    set isCopied = ##class(%File).CopyFile(origin, destination, 1)
    if isCopied = 0 {
      set sc = $$$ERROR($$$GeneralError, "Unable to copy "_origin_" to destination.")
    }
  }
  quit sc
]]></Implementation>
</Method>

<Method name="GetFileExtension">
<Internal>1</Internal>
<FormalSpec>path:%String,isWebPath:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if $piece(path, ..Slash, *)?1"."3A quit ""
  if isWebPath || (..GetSourceExtension() = "") {
    set sliceSize = 0
  } else {
    set sliceSize = 1
  }
  // -1 to ignore last piece (.txt) when not inside web path or when source extension is not provided.
  quit "."_$zconvert($piece(path, ".", *-sliceSize), "U")
]]></Implementation>
</Method>

<Method name="SynchronizeProject">
<FormalSpec>*addedCount:%String=0,*removedCount:%String=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set (sc, scc) = $$$OK
  set itemName = ""
    
  #dim item As %Studio.Project
  
  // We must check and remove all invalid items if the user desires to import everything
  // from the repository.
  if ..IsBatch $$$QuitOnError(..Project.Check())
  
  // Now that the project is clear, we add the new items.
  for {
    set itemName = $order(i%ItemsList(itemName), 1, type)    
    quit:itemName=""    
    
    set sc = $$$ADDSC(sc, ..Project.AddItem(itemName))    
  }
  set ssc = ..Project.%Save()
  set scc = $$$EMBEDSC(scc, sc)
  quit scc
]]></Implementation>
</Method>

<Method name="ResetLists">
<Implementation><![CDATA[
  
  kill i%ImportList, i%ItemsList
  set (i%ImportList, i%ItemsList) = 0
]]></Implementation>
</Method>

<Method name="AssertValidExtension">
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>origin:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sourceFileExtension = "."_$$$ucase($piece(origin, ".", *))
  
  if $listfind($$$RoutineExtensions, sourceFileExtension) || (sourceFileExtension = ".CLS") {
    set sourceFileExtension = ""
  }  
  
  if (sourceFileExtension '= $$$ucase(..GetSourceExtension())) {
    write !, sourceFileExtension, " - ", $$$ucase(..GetSourceExtension())
    set fileName = ##class(%File).GetFilename(origin)
    set expectedSourceExtension = $select(..SourceExtension = "" : "keep the Caché format", 1: "terminate with "_..SourceExtension)
    quit $$$ERROR($$$GeneralError, "Unable to describe the file "_fileName_ " as it violates the current source extension. "_$c(10, 10)_"It must "_expectedSourceExtension_".")
  }
  quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Port.Project.Manager">
<IncludeCode>portutils</IncludeCode>
<TimeCreated>64306,34528.811674</TimeCreated>

<Method name="AssertUtilityCreation">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,path:%String,logLevel:%String,sourceExtension:%String,sc:%Status</FormalSpec>
<Private>1</Private>
<ReturnType>Port.Project.Base</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set utility = ""  
  set utilityTypes("E") = "Port.Project.Exporter"
  set utilityTypes("I") = "Port.Project.Importer"
  set utilityTypes("X") = "Port.Project.XMLExporter"  
  
  try {
    set utility = $classmethod(utilityTypes(type), "%New", path, logLevel, sourceExtension)
    quit
  } catch ex {
    set sc = ex.AsStatus()
  }
  quit utility
]]></Implementation>
</Method>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<FormalSpec>outputPath:%String,logLevel:%Boolean=2,force:%Boolean=0,ignoredPaths:%ListOfDataTypes="",sourceExtension:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set exporter = ..AssertUtilityCreation("E", outputPath, logLevel, sourceExtension, .sc)
  $$$QuitOnError(sc)
  set exporter.Overwrite = force    
  $$$QuitOnError(exporter.Ignore(ignoredPaths))
  $$$QuitOnError(exporter.Export())
  set projectName = exporter.GetProjectName()
  if exporter.AffectedCount > 0 {
    $$$QuitOnError(##class(Port.SourceControl.Log).LogChange(projectName, projectName_".PRJ"))
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportToXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>outputPath:%String,justProject:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set exporter = ..AssertUtilityCreation("X", outputPath, 0, "", .sc)
  $$$QuitOnError(sc)  
  quit exporter.ExportToXML(justProject)
]]></Implementation>
</Method>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<FormalSpec>inputPath:%String,logLevel:%Boolean=2,skipBackup:%Boolean=0,overwrite:%Boolean=0,ignoredPaths:%ListOfDataTypes="",sourceExtension:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set importer = ..AssertUtilityCreation("I", inputPath, logLevel, sourceExtension, .sc)
  $$$QuitOnError(sc)
  $$$QuitOnError(importer.Ignore(ignoredPaths))
  
  set importer.SkipBackup = skipBackup
  set importer.IsBatch = 1
  set importer.Overwrite = overwrite   
  set projectName = importer.GetProjectName()
  
  $$$QuitOnError(importer.Import())
  
  if importer.AffectedCount > 0 {
    $$$QuitOnError(##class(Port.SourceControl.Log).LogChange(projectName, projectName_".PRJ"))
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ImportPartial">
<ClassMethod>1</ClassMethod>
<FormalSpec>basePath:%String,target,logLevel:%Boolean=2,skipBackup:%Boolean=0,overwrite:%Boolean=0,ignoredPaths:%ListOfDataTypes="",sourceExtension:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set importer = ..AssertUtilityCreation("I", basePath, logLevel, sourceExtension, .sc)  
  $$$QuitOnError(sc)
  $$$QuitOnError(importer.Ignore(ignoredPaths))
  
  set importer.LogLevel = logLevel
  set importer.SkipBackup = skipBackup
  set importer.Overwrite = 1
     
  $$$QuitOnError(importer.ImportPartial(target, .importedList))
  
  do ..LogFromImportList(importer.GetProjectName(), .importedList)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveInvalidItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String=^||%Studio.Project</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set project = ##class(%Studio.Project).%OpenId(projectName)
  $$$QuitOnError(project.Check())
  $$$QuitOnError(project.%Save()) 
  quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveItemsByType">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String,type:%String,*items:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set project = ##class(%Studio.Project).%OpenId(projectName)
  set s = ##class(%SQL.Statement).%New()
  $$$QuitOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectItemsList"))
  set r = s.%Execute(projectName)
  
  while r.%Next() {
    set itemType = r.%Get("Type")
    set name = r.%Get("Name")
    if itemType = type {
      set items(name) = ""     
      set sc = project.RemoveItem(name, itemType)
      if $$$ISERR(sc) quit
    }
  }
  $$$QuitOnError(project.%Save())
  quit sc
]]></Implementation>
</Method>

<Method name="ExportTestSuiteToXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>outputPath:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set testPath = ##class(Port.SourceControl.Config).GetTestPath()
  set exporter = ..AssertUtilityCreation("X", .outputPath, 0, "", .sc)
  $$$QuitOnError(sc)
  quit exporter.ExportTests(outputPath_"/"_testPath)
]]></Implementation>
</Method>

<Method name="LogFromImportList">
<Final>1</Final>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[projectName:%String,&importList:%String]]></FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
  if 'importList quit
  
  for i=1:1:10 {
    do LoopThroughType(projectName, importList, i)
  }  
  
LoopThroughType(projectName, importedList, group)
  set itemName = "" 
  
  for {
    set itemName = $order(importList(group, $listget($$$ImportTypes, group), itemName))
    quit:itemName=""
    
    if group = 2 set itemName = itemName_".CLS"   
    do ##class(Port.SourceControl.Log).LogChange(projectName, itemName)
  }
  quit 1
]]></Implementation>
</Method>
</Class>


<Class name="Port.Project.XMLExporter">
<Super>Port.Project.Base</Super>
<TimeCreated>64306,34528.900364</TimeCreated>

<Method name="ExportToXML">
<FormalSpec>justProject:%Boolean=0,qspec:%String="/diffexport=1/nodisplay",charset:%String="UTF8",*errorlog:%Status=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set destination = ##class(%File).NormalizeFilename(..BasePath_"/"_..ProjectName_".xml")
  //set directory = ##class(%File).GetDirectory(destination)
  //$$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(directory))  
  do ..Write("[nl]Exporting project {P1} to XML ...", 0, ..GetProjectName())
  $$$QuitOnError(..Project.Export(destination, qspec, justProject, errorlog, charset))
  do ..Write("[nl]Project exported to {P1}[nl]", 0, destination)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportTests">
<FormalSpec><![CDATA[path:%String,qspec:%String="/diffexport=1/nodisplay",&tests:%String="",&errors=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
  set sc = $$$OK
  set exported = 0
  
  set absoluteBasePath = ##class(%File).NormalizeFilename(path)
  $$$QuitOnError(##class(Port.Project.Helper).ImplyDirectoryCreation(absoluteBasePath))
  
  set s = ##class(%SQL.Statement).%New()
  $$$QuitOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectItemsList"))
  set r = s.%Execute(..Project.Name)
  while r.%Next(.sc) {
    if $$$ISERR(sc) quit
    set type = r.%Get("Type")
    if type = "CLS" {     
      set class = r.%Get("Name")      
      if 'exported set exported = ..ExportTest(absoluteBasePath, class, .esc, qspec)
      else  do ..ExportTest(absoluteBasePath, class, .esc)          
      set sc = $$$ADDSC(sc, esc)
    }
  } 
  if 'exported {
    set sc = $$$ERROR(5001, "No test suites were found for this project.")
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ExportTest">
<FormalSpec>absoluteBasePath:%String,className:%String,sc:%Status=$$$OK,qspec="/diffexport=1/nodisplay"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set exported  = 0
  
  if '..IsUnitTestClass(className) quit exported  
  
  set test = ..ResolveTestLocation(absoluteBasePath, className)
  
  if $listvalid(test) && (test '= "") {
    set className = $listget(test, 1)
    set classPath = $listget(test, 2)
    do ..Logger.Log("Exporting test class {P1} ... ", 0, $replace(className, ".CLS", ""))
    set sc = $$$ADDSC(sc, $System.OBJ.Export(className, classPath,qspec,, "UTF-8"))
    do ..Logger.Log("done.[nl]", 0)
    set exported = 1
  }
  quit exported
]]></Implementation>
</Method>

<Method name="ResolveTestLocation">
<Final>1</Final>
<Internal>1</Internal>
<FormalSpec>absoluteBasePath:%String,className:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set test = $listbuild(className_".CLS", ##class(Port.Project.Helper).ClassToFile(absoluteBasePath, className, "xml"))
  quit test
]]></Implementation>
</Method>

<Method name="IsUnitTestClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  
  set isUnitTest = 0
  set descriptor = ##class(%Dictionary.CompiledClass).%OpenId(className)
  if '$isobject(descriptor) || ($isobject(descriptor) && (descriptor.Super = "")) quit 0
  
  if descriptor.Super [ "Port.UnitTest.TestCase" quit 1  
  
  // If the target class have some super class defined, we must consider that it could be
  // extending from multiple super classes. So we need to check each of them.
  for i=1:1:$length(descriptor.Super, ",") {
  	set extension = $piece(descriptor.Super, ",", i)
  	if ..IsUnitTestClass(extension) {
	  	set isUnitTest = 1
	  	quit
  	}  	
  }
	quit isUnitTest
]]></Implementation>
</Method>
</Class>


<Class name="Port.REST.API">
<Super>%CSP.REST</Super>
<TimeCreated>64398,32675.664927</TimeCreated>

<XData name="UrlMap">
<XMLNamespace>http://github.com/rfns/port</XMLNamespace>
<Data><![CDATA[
<Routes>
    <Route Url="/:namespace/projects" Method="GET" Call="GetNamespaceProjects"/>
    <Route Url="/:namespace/projects/:projectName" Method="POST" Call="GetSourceCodeFromProjectItems"/>
  </Routes>
]]></Data>
</XData>

<Method name="CreateHttpRequestHandler">
<FormalSpec>resourceLocation:%String,*httpRequest:%Net.HttpRequest</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   
  set httpRequest = ##class(%Net.HttpRequest).%New()
  do httpRequest.SetHeader("Content-Type", "application/json; charset=utf-8")
  $$$QuitOnError(httpRequest.EntityBody.CopyFrom(%request.Content))
  $$$QuitOnError(httpRequest.Send(%request.Method, resourceLocation))
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetNamespaceProjects">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  #define ThrowOnSQLError(%o) throw:(%o.%SQLCODE > 0) ##class(%Exception.SQL).CreateFromSQLCODE(%o.%SQLCODE, o.%Message) 
  #dim item As %DynamicObject
  #dim items As %DynamicArray = []
    
  set sc = $$$OK
  
  try {
    set data = {} 
    new $namespace  
    set $namespace = namespace
    set s = ##class(%SQL.Statement).%New()
    
    $$$ThrowOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectList"))
    set c = s.%Execute()
    $$$ThrowOnSQLError(c)
    
    while c.%Next(.sc) {
      $$$ThrowOnError(sc) 
      
      set item = ##class(%DynamicObject).%New()
      
      $$$ThrowOnError(item.%Set("id", c.%Get("ID"), "string"))
      $$$ThrowOnError(item.%Set("name", c.%Get("Name"), "string"))
      $$$ThrowOnError(item.%Set("last_modified", c.%Get("LastModified"), "string"))
           
      $$$ThrowOnError(items.%Push(item))      
    }
    do data.%Set("projects", items)
    write data.%ToJSON()
  } catch ex {
    set %response.Status = ..#HTTP500INTERNALSERVERERROR
    do ..DispatchExceptionAsResponseError(ex)
    set sc = ex.AsStatus()
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="DispatchExceptionAsResponseError">
<ClassMethod>1</ClassMethod>
<FormalSpec>exception:%Exception.AbstractException</FormalSpec>
<Implementation><![CDATA[
  if '$isobject(exception) quit
  if 'exception.%Extends("%Exception.AbstractException") quit
  
  set status = exception.AsStatus()
  
  do ..DispatchStatusAsResponseError(status)
  quit status
]]></Implementation>
</Method>

<Method name="DispatchStatusAsResponseError">
<ClassMethod>1</ClassMethod>
<FormalSpec>status:%Status,httpStatus:%String=..#HTTP500INTERNALSERVERERROR</FormalSpec>
<Implementation><![CDATA[
  set error = {}
  do error.%Set("code", $System.Status.GetErrorCodes(status))
  do error.%Set("message", $System.Status.GetErrorText(status))
  write error.%ToJSON()
  quit status
]]></Implementation>
</Method>

<Method name="FetchProjectItemNames">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,projectName:%String,*items:%DynamicArray=[]</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  #define ThrowOnSQLError(%o) throw:(%o.%SQLCODE > 0) ##class(%Exception.SQL).CreateFromSQLCODE(%o.%SQLCODE, o.%Message) 
  
  if projectName = "" quit ..DispatchStatusAsResponseError($$$ERROR($$$BadParameter, "missing /:projectName parameter."), ..#HTTP400BADREQUEST)  
     
  if '$isobject(%request.Content) quit ..DispatchStatusAsResponseError($$$ERROR($$$GeneralError, "Missing object payload."))
  set payload = ##class(%DynamicObject).%FromJSON(%request.Content)
  
  if '$isobject(payload) quit ..DispatchStatusAsResponseError($$$ERROR($$$GeneralError, "payload must be an object."))
  if '$isobject(payload.items) quit ..DispatchStatusAsResponseError($$$ERROR($$$BadParameter, "missing items array inside payload."), ..#HTTP400BADREQUEST)
  if 'payload.items.%IsA("%DynamicArray") quit ..DispatchStatusAsResponseError($$$ERROR($$$BadParameter, "items must be an array."), ..#HTTP400BADREQUEST)  
  
  set s = ##class(%SQL.Statement).%New()   
  
  try {    
    new $namespace
    set $namespace = namespace    
    $$$ThrowOnError(s.%PrepareClassQuery("%Studio.Project", "ProjectItemsList"))     
    
    set c = s.%Execute(projectName)
    $$$ThrowOnSQLError(c)
    
    set items = []
    set requestItemsLength = payload.items.%Size()
    
    while c.%Next(.sc) {
      $$$ThrowOnError(sc)      
      set itemName = c.%Get("Name")
      set type = c.%Get("Type")
      
      if type = "CLS" {
        set itemName = itemName_".cls"
      } else  {        
        set itemName = $piece(itemName, ".", *-1)_"."_$piece(c.%Get("Name"), ".", *)        
      }
      
      if requestItemsLength = 0 {        
        do items.%Push(itemName)
      } elseif ..ArrayContains(itemName, payload.items) {
        do items.%Push(itemName)
      }
    }
  } catch ex {
    set sc = ex.AsStatus()
  }
  quit sc
]]></Implementation>
</Method>

<Method name="ArrayContains">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>expression:%String,array:%DynamicArray</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  set contained = 0
  
  if '$isobject(array) quit 0
  if expression = "" quit 0
  
  set iterator = array.%GetIterator()
  set key = ""
  set value = ""  
  
  while iterator.%GetNext(.key, .value) {
    if expression = value {
      set contained = 1
      quit
    }
  }
  quit contained
]]></Implementation>
</Method>

<Method name="GetSourceCodeFromProjectItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String,projectName:%String</FormalSpec>
<Implementation><![CDATA[
  set sc = ..FetchProjectItemNames(namespace, projectName, .items)
  if $$$ISERR(sc) quit ..DispatchStatusAsResponseError(sc)
  
  do %request.Content.Clear()
  $$$QuitOnError(%request.Content.Write(items.%ToJSON()))
  $$$QuitOnError(##class(%Api.Atelier.v1).GetDocs(namespace))
  
  quit sc
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.Config">
<Super>%SYSTEM.Help</Super>
<TimeCreated>64306,34528.990495</TimeCreated>

<Method name="SetLogLevel">
<Description>
Sets the log level used to display the info. Ranging from 1 to 3, greater is more detailed.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>logLevel:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if '$isvalidnum(logLevel) { 
    quit $$$ERROR($$$GeneralError, "Log level must be a number between 0 and 2.")
  }
  if logLevel > 0 && (logLevel < 3) {
    set ^Port.SourceControl.Settings("general.logLevel") = logLevel
    quit $$$OK
  }
  quit $$$ERROR($$$GeneralError, "Log level out of range.")
]]></Implementation>
</Method>

<Method name="GetLogLevel">
<Description>
Gets the current configured log level.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  quit $get(^Port.SourceControl.Settings("general.logLevel"), 0)
]]></Implementation>
</Method>

<Method name="SetPrimaryWorkspace">
<Description>
Sets the path where the files are to be exported..</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newWorkspace:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("source.path") = $select(newWorkspace = "" : "/CacheProjects/{NAMESPACE}/{PROJECT}", 1: newWorkspace)
]]></Implementation>
</Method>

<Method name="GetWorkspace">
<Description>
Gets the resolved export path. Pass 1 to excludeProject to return the project's parent directory.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String=$get(^||%Studio.Project)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set customWorkspace = ..GetCustomWorkspace(projectName)
  if customWorkspace '= "" quit ..rewritePlaceHolders(customWorkspace, projectName)
  quit ..rewritePlaceHolders($get(^Port.SourceControl.Settings("source.path")), projectName)
]]></Implementation>
</Method>

<Method name="EnableAutoExportXML">
<Description>
Enables the feature: exports the project as XML when it is saved or plainly exported.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("xml.autoexport") = 1
]]></Implementation>
</Method>

<Method name="DisableAutoExportXML">
<Description>
Disables the feature: exports the project as XML when it is saved or plainly exported.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("xml.autoexport") = 0
]]></Implementation>
</Method>

<Method name="IsAutoExportXMLEnabled">
<Description>
Returns if the auto-export feature is enabled. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  quit ($get(^Port.SourceControl.Settings("xml.autoexport")) = 1)
]]></Implementation>
</Method>

<Method name="SetTestPath">
<Description>
Sets the path which the source control should export and look up for tests on XML format.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newPath:%String=""</FormalSpec>
<Implementation><![CDATA[
  
  set ^Port.SourceControl.Settings("test.path") = $select(newPath = "" : "tests/cls", 1: newPath)
]]></Implementation>
</Method>

<Method name="GetTestPath">
<Description>
Gets the resolved test path.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  quit ..rewritePlaceHolders($get(^Port.SourceControl.Settings("test.path")))
]]></Implementation>
</Method>

<Method name="EnableTestOnDemand">
<Description>
Informs the source control to run associated test class when the source is compiled.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("test.ondemand") = 1
]]></Implementation>
</Method>

<Method name="DisableTestOnDemand">
<Description>
Disables the test class association.</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("test.ondemand") = 0
]]></Implementation>
</Method>

<Method name="IsTestOnDemandEnabled">
<Description>
Returns 1 if association is enabled, 0 if not.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  quit ($get(^Port.SourceControl.Settings("test.ondemand")) = 1)
]]></Implementation>
</Method>

<Method name="SetTestClassPrefix">
<Description>
Sets the prefix used to associate the source with it's test class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newPrefix:%String=""</FormalSpec>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("test.prefix") = $select(newPrefix = "" : "UnitTest", 1: newPrefix)
]]></Implementation>
</Method>

<Method name="GetTestClassPrefix">
<Description>
Gets the association prefix.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
  quit $get(^Port.SourceControl.Settings("test.prefix"))
]]></Implementation>
</Method>

<Method name="SetSourceExtension">
<Description>
Defines the extension to be used for exported source files overwriting their own.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ..TrackActiveExtension()
  if $extract(value) = "." set value = $extract(value, 2, *)
  set ^Port.SourceControl.Settings("source.extension") = value
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSourceExtension">
<Description>
Gets the source extension.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
  set extension = $get(^Port.SourceControl.Settings("source.extension"))
  if extension = "" quit extension
  quit extension
]]></Implementation>
</Method>

<Method name="IsSameSourceExtension">
<Final>1</Final>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  set extension = ..GetSourceExtension()
  quit (extension = $get(^Port.SourceControl.Settings("internals.trackers.extension")))
]]></Implementation>
</Method>

<Method name="TrackActiveExtension">
<Final>1</Final>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[  set ^Port.SourceControl.Settings("internals.trackers.extension") = ..GetSourceExtension()
]]></Implementation>
</Method>

<Method name="SetCustomWorkspace">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String,path:%String=..GetWorkspace()</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ^Port.SourceControl.Settings("workspace.project", projectName) = path
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCustomWorkspace">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set customWorkspace = $get(^Port.SourceControl.Settings("workspace.project", projectName))
  quit ..rewritePlaceHolders(customWorkspace, projectName)
]]></Implementation>
</Method>

<Method name="HasCustomWorkspace">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 
  quit (..GetCustomWorkspace(projectName) '= "")
]]></Implementation>
</Method>

<Method name="RemoveCustomWorkspace">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String</FormalSpec>
<Implementation><![CDATA[  kill ^Port.SourceControl.Settings("workspace.project", projectName)
]]></Implementation>
</Method>

<Method name="rewritePlaceHolders">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>basePath:%String,projectName:%String=$get(^||%Studio.Project),params...:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  if '$data(params) set params = ""  
  set translatedPath = basePath  
  #define RewriteIfPathContains(%expression, %replacement) set translatedPath = $select(translatedPath [ %expression : $replace(translatedPath, %expression, %replacement), 1: translatedPath) 
  
  set installDirectory = $System.Util.InstallDirectory()
  set installDirectory = $extract(installDirectory, 1, $length(installDirectory) - 1)
  $$$RewriteIfPathContains("{NAMESPACE}", $namespace)
  $$$RewriteIfPathContains("{INSTALLDIR}", installDirectory)
  $$$RewriteIfPathContains("{USERNAME}", $username) 
  $$$RewriteIfPathContains("{EXPORTPATH}", ..GetWorkspace())
  $$$RewriteIfPathContains("{FULLEXPORTPATH}", ##class(%File).NormalizeFilename(..GetWorkspace())) 
  $$$RewriteIfPathContains("{SLASH}", $select($$$isWINDOWS: "\", 1: "/"))
  $$$RewriteIfPathContains("{PROJECT}", projectName) 
  
  if params {
    for i=1:1:params $$$RewriteIfPathContains("{P"_i_"}", params(i))
  }
  quit translatedPath
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.Hooks">
<Super>%Studio.SourceControl.Base</Super>
<TimeCreated>64306,34529.285329</TimeCreated>

<XData name="Menu">
<Data><![CDATA[
<MenuBase>
<Menu Name="%SourceMenu" Type="0">
<MenuItem Name="%ExportProject"/>
<MenuItem Name="%ExportProjectToXML"/>
<MenuItem Name="%ExportTestSuiteToXML"/>
<MenuItem Separator="1" />
<MenuItem Name="%RemoveProjectClasses"/>
<MenuItem Name="%RemoveProjectWebFiles"/>
<MenuItem Name="%RemoveProjectRoutines"/>
<MenuItem Separator="1" />
<MenuItem Name="%RemoveInvalidItems"/>
<MenuItem Separator="1" />
<MenuItem Name="%RunTestSuite"/> 
<MenuItem Separator="1" />
<MenuItem Name="%ImportProject"/>
<MenuItem Separator="1" />
<MenuItem Name="%ForceExportProject"/>
<MenuItem Name="%ForceImportProject"/>
</Menu>
<Menu Name="%SourceContext" Type="1">
<MenuItem Name="%ExportActiveItem" />
<MenuItem Name="%ImportActiveItem" />
<MenuItem Separator="1" />
<MenuItem Name="%RunActiveItemTest"/>
</Menu>
</MenuBase>
]]></Data>
</XData>

<Method name="OnAfterSave">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim exporter As Port.Project.Exporter 
  set projectName = $get(^||%Studio.Project)
  set sc = $$$OK
  if projectName '= "" && (projectName '[ "Default") {
    set exportPath = ##class(Config).GetWorkspace()
    set type = ##class(Port.Project.Helper).GetItemExtension(InternalName)    
    
    if type '= "PRJ" {
      set sourceExtension = ##class(Config).GetSourceExtension()
      set exporter = ##class(Port.Project.Exporter).%New(exportPath, 2)
      set itemName = ##class(Util).ResolveInternalName(InternalName)           
      set shouldExportAsXML = ##class(Config).IsAutoExportXMLEnabled()            
      
      set exporter.SourceExtension = sourceExtension
      
      $$$QuitOnError(exporter.IsProjectMember(InternalName, .isMember))
      if 'isMember quit $$$OK
      
      if type = "CLS" {
        set sc = exporter.ExportClass(itemName)
      } elseif ##class(Port.Project.Helper).IsRoutine(InternalName) {
        set sc = exporter.ExportRoutine(InternalName)
      } elseif type = "PKG" {     
        set sc = exporter.ExportPackage(itemName)     
      } elseif type '= "" {
        set sc = exporter.ExportWebFile(itemName)     
      }
      if '%importingFromXML {        
        $$$QuitOnError(##class(Log).LogChange(projectName, InternalName))
        if shouldExportAsXML $$$QuitOnError(##class(Port.Project.Manager).ExportToXML(exportPath))
      }
    }  
  }
  if '##class(Config).HasCustomWorkspace(projectName) { 
    do ##class(Config).SetCustomWorkspace(projectName)
  }   
  quit sc
]]></Implementation>
</Method>

<Method name="OnBeforeSave">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set projectName = $get(^||%Studio.Project)
  
  if projectName '= "" && (projectName [ "Default") {
    write "WARNING: This source control enforces the policy of using named projects!", !
    write "WARNING: Which means that 'Default' projects are not tracked or exportable using this tool.", !
    write "WARNING: In order to export the project, you're obliged to change the name to something else than 'Default'."
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="UserAction">
<FormalSpec><![CDATA[Type:%Integer,Name:%String,InternalName:%String,SelectedText:%String,&Action:%String,&Target:%String,&Msg:%String,&Reload:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set name = $piece(Name, ",", 2)
  set isContextual = ($piece(Name, ",", 1) = "%SourceContext")
  // We must know if the user is importing from an XML and prevent the XML from being exported.
  set %importingFromXML = (Name = 6)
  
  if $data(^||%Studio.Project) {
    set projectName = ^||%Studio.Project
    set fullPath = ##class(Util).GetFullItemPath(InternalName)
    set itemName = ##class(Util).ResolveInternalName(InternalName)
    set projectPath = ##class(Config).GetWorkspace()
    set testPath = ##class(Config).GetTestPath()
    set logLevel = ##class(Config).GetLogLevel()
    set shouldExportAsXML = ##class(Config).IsAutoExportXMLEnabled()
    set sourceExtension = ##class(Config).GetSourceExtension()
    set ignoredPaths = ##class(Util).GetIgnoredPaths(projectPath)
    
    if name = "%ExportProject" {
      set shouldOverwrite = '##class(Config).IsSameSourceExtension()
      if shouldOverwrite do ##class(Config).TrackActiveExtension()      
      $$$QuitOnError(##class(Port.Project.Manager).Export(projectPath, logLevel, shouldOverwrite, ignoredPaths, sourceExtension))
      if shouldExportAsXML $$$QuitOnError(##class(Port.Project.Manager).ExportToXML(projectPath))      
      quit $$$OK
    }
    if name = "%ExportProjectToXML" {
      quit ##class(Port.Project.Manager).ExportToXML(projectPath)
    }
    if name = "%ExportTestSuiteToXML" {
      quit ##class(Port.Project.Manager).ExportTestSuiteToXML(projectPath)
    }
    if name = "%RunTestSuite" && (projectPath '= "") {
      do ##class(%File).RemoveDirectoryTree(projectPath_"/"_testPath)
      $$$QuitOnError(##class(Port.Project.Manager).ExportTestSuiteToXML(projectPath))
      $$$QuitOnError(##class(Port.UnitTest.Manager).RunTest(testPath, "/recursive/load/run/nodelete"))
    }       
    if name = "%ImportProject" {
      $$$QuitOnError(##class(Port.Project.Manager).Import(projectPath, logLevel, 0, 0,,sourceExtension))
    }
    if name = "%RemoveProjectClasses" {
      $$$QuitOnError(##class(Port.Project.Manager).RemoveItemsByType(projectName, "CLS"))
      quit ##class(Log).Synchronize()
    }
    if name = "%RemoveProjectWebFiles" {
      $$$QuitOnError(##class(Port.Project.Manager).RemoveItemsByType(projectName, "CSP"))
      quit ##class(Log).Synchronize()
    }
    if name = "%RemoveProjectRoutines" {
      $$$QuitOnError(##class(Port.Project.Manager).RemoveItemsByType(projectName, "MAC"))
      quit ##class(Log).Synchronize()
    }
    if name = "%RemoveInvalidItems" {
      $$$QuitOnError(##class(Port.Project.Manager).RemoveInvalidItems(projectName))
      quit ##class(Log).Synchronize()     
    }
    
    if name = "%ExportActiveItem" {
      if $$$ucase(InternalName) '= ($$$ucase(projectName_".PRJ")) {
        set exporter = ##class(Port.Project.Exporter).%New(projectPath)
        set exporter.Overwrite = 1
        set exporter.SourceExtension = sourceExtension
        set internalName = InternalName
        if $extract(InternalName, 1) = "/" {
          set internalName = $extract(InternalName, 2, *)
        }
        $$$QuitOnError(exporter.ExportItem(internalName))
        $$$QuitOnError(##class(Log).LogChange(projectName, internalName))
        if shouldExportAsXML $$$QuitOnError(##class(Port.Project.Manager).ExportToXML(projectPath))
      } else {
        set ignoredPaths = ##class(Util).GetIgnoredPaths(projectPath)
        quit ##class(Port.Project.Manager).Export(projectPath, logLevel, 1)
      }
    }
    
    if name = "%ImportActiveItem" {
      if $$$ucase(InternalName) = ($$$ucase(projectName_".PRJ")) {
        quit ##class(Port.Project.Manager).Import(projectPath, logLevel, 0, 1, ignoredPaths, sourceExtension)
      } else {       
        quit ##class(Port.Project.Manager).ImportPartial(projectPath, fullPath, logLevel, 0, 1, ignoredPaths, sourceExtension)
      }
    }
    
    if name = "%RunActiveItemTest" {
      set testable = 
        ##class(Util).AssertTestableClass(itemName, .testableClass) &&
        ##class(Port.Project.XMLExporter).IsUnitTestClass(itemName)
      if testable {
        $$$QuitOnError(##class(Port.UnitTest.Manager).DebugLoadTestSuite(testPath))
        quit ##class(Port.UnitTest.Manager).DebugRunTestCase(testPath, testableClass)
      }
    }
    
    if name = "%ForceExportProject" {
      set shouldOverwrite = '##class(Config).IsSameSourceExtension()
      if shouldOverwrite do ##class(Config).TrackActiveExtension()
      $$$QuitOnError(##class(Port.Project.Manager).Export(projectPath, logLevel, 1, ignoredPaths, sourceExtension))
      if shouldExportAsXML $$$QuitOnError(##class(Port.Project.Manager).ExportToXML(projectPath))
      if '##class(Config).HasCustomWorkspace(projectName) { 
        do ##class(Config).SetCustomWorkspace(projectName)
      }
    }
    
    if name = "%ForceImportProject" {
      quit ##class(Port.Project.Manager).Import(projectPath, logLevel, 0, 1, ignoredPaths, sourceExtension)
    }    
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnMenuItem">
<FormalSpec><![CDATA[MenuName:%String,InternalName:%String,SelectedText:%String,&Enabled:%Boolean,&DisplayName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set itemName = ##class(Port.SourceControl.Util).ResolveInternalName(InternalName)
  set menu=$piece(MenuName,","),name=$piece(MenuName,",",2)
  If menu'="%SourceMenu",menu'="%SourceContext" Quit $$$OK
  set isContextual = (menu = "%SourceContext")
  if name = "%ExportProject" {
    set DisplayName = "Export Current Project"
  } 
  if name = "%ExportProjectToXML" {
    set DisplayName = "Export Current Project to XML"
  } 
  if name = "%ExportTestSuiteToXML" {
    set DisplayName = "Export Project Test Suites to XML"
  }   
  if name = "%ImportProject" {
    set DisplayName = "Import Project"    
  } 
  if name = "%RemoveProjectClasses" {
    set DisplayName = "Remove All Classes from the Current Project"
  } 
  if name = "%RemoveProjectWebFiles" {
    set DisplayName = "Remove All Files from the Current Project"
  } 
  if name = "%RemoveProjectRoutines" {
    set DisplayName = "Remove All Routines from the Current Project"
  } 
  if name = "%RemoveInvalidItems" {
    set DisplayName = "Remove Invalid Items from the Current Project"
  }
  
  if name= "%RunTestSuite" {
    set DisplayName = "Run Test Suites"
  }
  
  if name = "%RunActiveItemTest" {
    set DisplayName = "Run Tests Associated to this Item"
    set Enabled = ##class(Util).AssertTestableClass(itemName) && ##class(Port.Project.XMLExporter).IsUnitTestClass(itemName)
  } 
  
  if name = "%ExportActiveItem" {
    set DisplayName = "Export This Item"
  }
  
  if name ="%ImportActiveItem" {
    set DisplayName = "Import This Item"
  }
  
  if name = "%ForceImportProject" {
    set DisplayName = "Force Current Project to be Imported"
  }
  
  if name = "%ForceExportProject" {
    set DisplayName = "Force Current Project to be Exported"
  }
  
  set isProjectOpened = ($get(^||%Studio.Project, "Default") '[ "Default")
  if 'isProjectOpened {
    set Enabled = 0
  }
  Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
Called after the compile of the item is done.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $get(%importingFromXML, 0) quit $$$OK
  set projectName = $get(^||%Studio.Project)
  set sc = $$$OK
  
  if projectName '= "" && (projectName '[ "Default") {
    set projectPath = ##class(Config).GetWorkspace()
    set itemName = ##class(Util).ResolveInternalName(InternalName)
    set type = $$$ucase($piece(InternalName, ".", $length(InternalName, ".")))
    set xmlExporter = ##class(Port.Project.XMLExporter).%New(projectPath)
    
    if type = "CLS" {     
      set testPath = ##class(Config).GetTestPath()      
      set shouldRunTest = (
        ##class(Config).IsTestOnDemandEnabled() &&
        ##class(Util).AssertTestableClass(itemName, .testableClass) &&
        ##class(%File).DirectoryExists(projectPath_"/"_testPath)        
      )
      if shouldRunTest {
        set activeTestableClass = InternalName
        
        do ##class(%RoutineMgr).TS(activeTestableClass, .act, .isActiveUpToDate)        
        do ##class(%RoutineMgr).TS(testableClass_".CLS", .tct, .isTestUpToDate)
                
        if 'isTestUpToDate {
          set filePath = ##class(Port.Project.Helper).ClassToFile(projectPath_"/"_testPath, testableClass)
          $$$QuitOnError(xmlExporter.ExportTest(projectPath, testableClass))
          $$$QuitOnError(##class(Port.UnitTest.Manager).DebugLoadTestSuite(testPath, "/nodisplay"))
        }       
        $$$QuitOnError(##class(Port.UnitTest.Manager).DebugRunTestCase(testPath, testableClass))   
      } 
    }
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeDelete">
<Description>
Called before an item is deleted. Returning an error code prevents the delete from occuring.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  if (InternalName?1".PRJ") {
    set projectName = $piece(InternalName, ".", 1, *-1)
    do ##class(Config).RemoveCustomWorkspace(projectName)
  }
  quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.Installer">
<Abstract>1</Abstract>
<TimeCreated>64306,34529.365286</TimeCreated>

<Method name="Install">
<ClassMethod>1</ClassMethod>
<FormalSpec>force:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  
  if 'force {
    if $data(^Port.SourceControl("installed")) {
      write !, "Port is already installed. The installer has been aborted.", !
      write "If you wish to change current settings then please use the wizard.", !!
      write "do Wizard^Port", !
      quit $$$ERROR($$$GeneralError, "Port is already installed.")
    }
  }
  
  try {
    write !, "Installing Port ... please wait a moment.", !
    write "> Creating global mappings ...", !    
    $$$ThrowOnError(..CreateGlobalMapping())
    write "> Setting up workspace structure ... ", !
    do ##class(Config).SetPrimaryWorkspace("/CacheProjects/{NAMESPACE}/{PROJECT}")
    write "> Setting up test files directory ...", !
    do ##class(Config).SetTestPath("tests")
    write "> Defining default test class prefix ..", !
    do ##class(Config).SetTestClassPrefix("UnitTest")
    write "> Enabling auto-testing ...", !
    do ##class(Config).EnableTestOnDemand()
    write "> Enabling auto-export for project XML ...", !
    do ##class(Config).EnableAutoExportXML()
    write "> Setting up log level ...", !
    do ##class(Config).SetLogLevel(1)
    write "> Setting up source extension ...", !
    do ##class(Config).SetSourceExtension("txt")    
    write "> Registering log cleaner task for "_$namespace_" ...", !
    $$$ThrowOnError(##class(LogCleaner).StartTask())
    write "> Activating source control class ...", !!
    $$$ThrowOnError(##class(%Studio.SourceControl.Interface).SourceControlClassSet("Port.SourceControl.Hooks", $namespace))
    write "ALL DONE.", !
    write "NOTE: Please note that you must restart Studio in order to make the new settings have effect."
    set ^Port.SourceControl("installed") = 1
  } catch ex {
    set sc = ex.AsStatus()    
    write !!, "FATAL: Failed to install port due to the following reason: "
    do $System.OBJ.DisplayError(sc)
  }
  quit sc
]]></Implementation>
</Method>

<Method name="CreateGlobalMapping">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set sc = $$$OK
  set thisNamespace = $namespace     
  new $namespace
  
  set $namespace = "%SYS"
  
  if ##class(Config.MapGlobals).Exists(thisNamespace, "Port.SourceControl*") {
    write "> Global is already mapped. Skipping ...", !
    quit $$$OK
  }
  
  try {
    $$$ThrowOnError(##class(Config.Namespaces).Get(thisNamespace, .nsProperties))
    set glProperties("Database") = thisNamespace
    $$$ThrowOnError(##class(Config.MapGlobals).Create(thisNamespace, "Port.SourceControl*", .glProperties))
    set $namespace = thisNamespace
  } catch ex {
    set $namespace = thisNamespace
    set sc = ex.AsStatus()
  }
  quit sc
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.Log">
<Abstract>1</Abstract>
<IncludeCode>portutils</IncludeCode>
<TimeCreated>64306,34529.444198</TimeCreated>

<Method name="LogChange">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName=^||%Studio.Project,itemName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ..ExtractItemDescription(itemName, .name, .type)
  set ^Port.SourceControl.Projects(projectName, type, name) = $zdatetime($horolog, 3,,,,,,,,,0) 
  quit $$$OK
]]></Implementation>
</Method>

<Method name="ExtractItemDescription">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName,*name="",*type=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
  set type = $$$ucase($piece(itemName, ".", *))
  set name = $piece(itemName, ".", 1, *-1)
  if '$listfind($$$ImportTypes, type) && (type '= "PRJ") {
    set name = itemName
    set type = "CSP"
  }
]]></Implementation>
</Method>

<Method name="GetLastChange">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectName:%String,itemName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  do ..ExtractItemDescription(itemName, .name, .type)
  quit $get(^Port.SourceControl.Projects(projectName, type, name), 0)
]]></Implementation>
</Method>

<Method name="Synchronize">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #define ProjectExists(%id) ##class(%Studio.Project).%ExistsId(%id)
  #define ItemExists(%id) ##class(%Studio.ProjectItem).%ExistsId(%id)
  
  set sc = $$$OK
  if '$data(^Port.SourceControl.Projects) quit sc
  
  set global = "^Port.SourceControl.Projects"
  set q = $query(@global@(""))
  for {
    quit:q=""
    
    set projectName = $qsubscript(q, 1)
    set type = $qsubscript(q, 2)
    set itemName = $qsubscript(q, 3)
    
    if type '= "CLS" && (type '= "PRJ") set itemName = itemName_"."_type
    if type = "CSP" set itemName = $extract(itemName, 2, $length(itemName))
    set itemId = projectName_"||"_itemName_"||"_type
    if '$$$ProjectExists(projectName) || '$$$ItemExists(itemId) {
      kill @q
    }
    set q = $query(@q, 1)
  }
  quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.LogCleaner">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>64306,34529.529651</TimeCreated>

<Method name="StartTask">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set taskName = "Port Log Synchronizer for "_$namespace
  if ##class(%SYS.Task).FindId(taskName) quit $$$OK    
  set task = ##class(%SYS.Task).%New()
  set task.TimePeriod = 0
  set task.Description = "Keeps the log synchronized with existing projects and files."
  set task.Name = taskName
  set task.TimePeriodEvery = 1
  set task.DailyFrequency = 1
  set task.DailyFrequencyTime = 0
  set task.DailyStartTime = 28800
  set task.DailyIncrement = 180
  set task.NameSpace = $namespace
  set task.TaskClass = $classname($this)
  quit task.%Save()
]]></Implementation>
</Method>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  quit ##class(Port.SourceControl.Log).Synchronize()
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.Util">
<Abstract>1</Abstract>
<TimeCreated>64306,34529.618315</TimeCreated>

<Parameter name="DEFAULTPATH">
<Default>/CacheProjects/{NAMESPACE}/{PROJECT}</Default>
</Parameter>

<Method name="GetFullItemPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
  set fullPath = ""
  set type = ##class(Port.Project.Helper).GetItemExtension(itemName)
  set defaultPath = ##class(%File).NormalizeFilename(##class(Config).GetWorkspace())
  
  if type = "CLS" {
    set fullPath = ##class(Port.Project.Helper).ClassToFile(defaultPath_"/cls", $piece(itemName, ".", 1, *-1))
  } elseif ##class(Port.Project.Helper).IsRoutine(itemName) {
    set ext = $$$lcase(type)
    set fileName = $$$lcase(itemName)_"."_##class(Config).GetSourceExtension()
    set fullPath = ##class(%File).NormalizeFilename(defaultPath_"/"_ext_"/"_fileName) 
  } elseif type = "PKG" {
    set fullPath = ##class(%File).GetDirectory(##class(Port.Project.Helper).ClassToFile(defaultPath_"/cls", itemName))
  } else {
    set sourceFilePath = $replace(itemName, $System.CSP.GetDefaultApp($namespace), "/web")    
    set fullPath = ##class(%File).NormalizeFilename(defaultPath_sourceFilePath) 
  } 
  quit fullPath
]]></Implementation>
</Method>

<Method name="ResolveInternalName">
<ClassMethod>1</ClassMethod>
<FormalSpec>internalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  set name = internalName
  
  if $$$ucase(internalName) [ ".CLS" {
    set name = $piece(internalName, ".", 1, *-1)
  }
  quit name
]]></Implementation>
</Method>

<Method name="AssertTestableClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>className,*testableClass:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
  set prefix = ##class(Config).GetTestClassPrefix()
  set rootPackage = $piece(className, ".")  
  
  if rootPackage = prefix {
    set testableClass = className
  } elseif ##class(%Dictionary.ClassDefinition).%ExistsId(prefix_"."_className) {
    set testableClass = prefix_"."_className 
  }
  quit (testableClass '= "")
]]></Implementation>
</Method>

<Method name="GetIgnoredPaths">
<ClassMethod>1</ClassMethod>
<FormalSpec>basePath:%String</FormalSpec>
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
 
  set ignoredPaths = ##class(%ListOfDataTypes).%New()
  
  set f = ##class(%FileCharacterStream).%New()
  set f.Filename = basePath_"/port.json"  
  
  if f.Size > 0 {    
    while 'f.AtEnd {      
      do ignoredPaths.Insert(f.ReadLine())
    }
  }
  quit ignoredPaths
]]></Implementation>
</Method>
</Class>


<Class name="Port.SourceControl.Wizard">
<Abstract>1</Abstract>
<TimeCreated>64399,33218.690245</TimeCreated>

<Method name="Start">
<ClassMethod>1</ClassMethod>
<FormalSpec>hideIntroduction:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
  set validChoices = $listbuild(1,2,3,4,5,6)
  set invalidChoice = 1
  set choice = ""  
  
  if 'hideIntroduction {
    write !, "Welcome to the Port configuration wizard."
  }
  
  while invalidChoice {
    if invalidChoice && (choice '= "") write "Invalid choice."
    do Menu
  }
    
  if choice = 1 quit ..StartWorkspaceConfigAssistant() quit
  if choice = 2 quit ..StartTestConfigAssistant() quit
  if choice = 3 quit ..StartAutoExportXMLConfigAssistant() quit
  if choice = 4 quit ..StartLogLevelConfigAssistant() quit
  if choice = 5 quit ..StartSourceExtensionConfigAssistant() quit
  if choice = 6 write !, "Bye." quit $$$OK
         
Menu
  set choice = ""
  write !!, "What do you want to do? (type the number)", !!
  
  write "1. Manage workspaces.", !
  write "2. Change test settings.", !
  write "3. Toggle project XML auto-export.", !
  write "4. Set log level.", !
  write "5. Set source extension.", !
  write "6. Exit.", !!
  
  write "Your choice: "
  
  read choice
  write !  
  set invalidChoice = ($listfind(validChoices, choice) = 0)
  quit
]]></Implementation>
</Method>

<Method name="StartWorkspaceConfigAssistant">
<ClassMethod>1</ClassMethod>
<FormalSpec>hideIntroduction:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
 
  set validChoices = $listbuild(1,2,3)
  set invalidChoice = 1
  set choice = ""    
  
  if 'hideIntroduction {  
    write !, "Manages workspaces that will contain the exported source code.", !!
  }
  
  while invalidChoice {
    if invalidChoice && (choice '= "") write "Invalid choice.", !!
    do Menu
  }
  
  if choice = 1 quit ..StartWorkspaceChoice1ConfigAssistant()
  if choice = 2 quit ..StartWorkspaceChoice2ConfigAssistant()
  if choice = 3 quit ..Start(1) 
  
  quit $$$OK
    
Menu
  set choice = ""
  write "What do you want to do? (type the number)", !!

  write "1. Change primary workspace.", !
  write "2. Manage existing workspaces.", !
  write "3. Go back.", !!
  
  write "Your choice: "
  
  read choice
  write !  
  set invalidChoice = ($listfind(validChoices, choice) = 0)
  quit
]]></Implementation>
</Method>

<Method name="StartWorkspaceChoice1ConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set isPathValid = 0
      
  write !, "Configures the primary workspace that will be used to export your source code."
  
  write !!, "You can use the following specific placeholders: ", !!
  
  write "{PROJECT} - The active project name.", !
  write "{NAMESPACE} - The active namespace name.", !
  write "{USERNAME} - The active user name.", !
  write "{INSTALLDIR} - The Caché installation directory."
  
  write !!, "Please type the ABSOLUTE path to be used when exporting your source files.", !
  write "Or leave it empty to use restore the default."
  
  write "You can use both: UNIX or Windows schemes.", !!
  write "Default is: ", !, "/CacheProjects/{NAMESPACE}/{PROJECT}", !
  write "Current is: ", !, $get(^Port.SourceControl.Settings("source.path"), "none"), !!
  write "New: ", !
  read path
  
  if path = "" set path = "/CacheProjects/{NAMESPACE}/{PROJECT}"
    
  do ##class(Config).SetPrimaryWorkspace(path)
  write !!, "The primary workspace is now set to: ", !
  write path, !!
  quit ..StartWorkspaceConfigAssistant(1)
]]></Implementation>
</Method>

<Method name="StartWorkspaceChoice2ConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  write !, "Manages workspaces associated to projects.", ! 
  write !, "Projects named here will not use the primary workspace definition."
  
  write !, "Type the name of the project (or leave it empty to abort): ", !
  read projectName
  
  if projectName = "" write !, "Aborted.", !! quit ..StartWorkspaceConfigAssistant(1)
  set projectExists = ##class(%Studio.Project).%ExistsId(projectName)
  
  if 'projectExists {
    write !!, "WARNING: The project "_projectName_ " doesn't exist yet.", !!
  }  
  
  set currentWorkspace = ##class(Config).GetCustomWorkspace(projectName)
  write !!, "Current workspace is: ", !
  write ##class(Config).GetWorkspace(projectName)
  write !!, "You will be asked for a new workspace now.", !
  write "You can use both: UNIX or Windows schemes.", !
  write "Note that workspace paths must be ABSOLUTE.", !
  write "You can use the following specific placeholders: ", !!
  
  write "{PROJECT} - The active project name.", !
  write "{NAMESPACE} - The active namespace name.", !
  write "{USERNAME} - The active user name.", !
  write "{INSTALLDIR} - The Caché installation directory.", !!
  
  write "Type the workspace path (or leave it empty to abort): ", !
  read workspacePath
  
  if workspacePath = "" write !, "Aborted.", !! quit ..StartWorkspaceConfigAssistant(1)
  
  do ##class(Config).SetCustomWorkspace(projectName, workspacePath)
  write !!, "The project "_projectName_" is now configured to be exported to the following path: ", !
  write ##class(Config).GetWorkspace(projectName), !!
  
  quit ..StartWorkspaceConfigAssistant(1)
]]></Implementation>
</Method>

<Method name="StartTestConfigAssistant">
<ClassMethod>1</ClassMethod>
<FormalSpec>hideIntroduction:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
  set validChoices = $listbuild(1,2,3,4)
  set invalidChoice = 1
  set choice = ""    
  
  if 'hideIntroduction {  
    write !, "Configures settings related to the Studio test integration.", !!
  }
  
  while invalidChoice {
    if invalidChoice && (choice '= "") write "Invalid choice.", !!
    do Menu
  }
  
  if choice = 1 quit ..StartTestChoice1ConfigAssistant()
  if choice = 2 quit ..StartTestChoice2ConfigAssistant()
  if choice = 3 quit ..StartTestChoice3ConfigAssistant()
  if choice = 4 quit ..Start(1)
  
  quit $$$OK
    
Menu
  set choice = ""
  write "What do you want to do? (type the number)", !!
  
  write "1. Enable or disable test on demand.", !
  write "2. Define a new test class prefix.", !
  write "3. Define the path where unit test classes should exported (XML).", !
  write "4. Go back.", !!
  
  write "Your choice: "
  
  read choice
  write !  
  set invalidChoice = ($listfind(validChoices, choice) = 0)
  quit
]]></Implementation>
</Method>

<Method name="StartAutoExportXMLConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set validChoices = $listbuild(1,2)
  set choice = ""
  set invalidChoice = 1
  
  set labels(1) = "ENABLED"
  set labels(0) = "DISABLED"  
  
  write !, "Exports an XML file from project when a document is saved on Studio.", !!

  while invalidChoice {
    if invalidChoice && (choice '= "") write "Invalid choice.", !!
    do Menu
  }
  
  if choice = 1 {
    do ##class(Port.SourceControl.Config).EnableAutoExportXML()
    write "Auto-export XML is now ENABLED."
  }
  
  if choice = 2 {
    do ##class(Port.SourceControl.Config).DisableAutoExportXML()
    write "Auto-export XML is now DISABLED."
  }
  
  write !!
  quit ..Start(1)
  
Menu
  set choice = ""
  write "What do you want to do? (type the number)", !!
    
  write "1. Enable project XML auto-export.", ! 
  write "2. Disable project XML auto-export.", !!  
     
  set status = ##class(Port.SourceControl.Config).IsAutoExportXMLEnabled()
  
  write "Auto-export XML is currently: "_labels(status), !!
  write "Your choice: "
  
  read choice
  set invalidChoice = ($listfind(validChoices, choice) = 0)
  write !
  quit
]]></Implementation>
</Method>

<Method name="StartLogLevelConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set validChoices = $listbuild(1,2)
  set invalidChoice = 1
  set choice = ""
  
  write !, "Specifies the log verbosity level when displaying operations.", !!
  
  while invalidChoice {
    if invalidChoice && (choice '= "") write "Invalid choice.", !!
    do Menu
  }
  
  do ##class(Port.SourceControl.Config).SetLogLevel(choice)
  write "Log verbosity level is now: "_##class(Port.SourceControl.Config).GetLogLevel()
  quit ..Start(1)
  
Menu
  set choice = ""
  write "Please set the log verbosity level (type the number):", !!
    
  write "1. Level 1: Displays item equeieing, import categories, backup notifications, repository status and error messages.", ! 
  write "2. Level 2: Same as Level 1, but includes atomical operations.", !!  
     
  set status = ##class(Port.SourceControl.Config).IsTestOnDemandEnabled()
  
  write "Log verbosity level is currently: "_##class(Port.SourceControl.Config).GetLogLevel(), !!
  write "Your choice: "
  
  read choice
  set invalidChoice = ($listfind(validChoices, choice) = 0)
  write !
  quit
]]></Implementation>
</Method>

<Method name="StartSourceExtensionConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set currentExtension = $get(^Port.SourceControl.Settings("source.extension"))
  write !, "Defines an extension to be appended globaly to every exported routine.", !!
  
  write "Please type the extension below: ", !!
  write "Current is: "_$select(currentExtension = "" : "none.", 1: "."_currentExtension), !
  write "New: "
  read extension   
  
  do ##class(Port.SourceControl.Config).SetSourceExtension(extension)
  set savedExtension = $get(^Port.SourceControl.Settings("source.extension"))
  write !!, "The extension is now set to: "_$select(savedExtension = "" : "none.", 1: "."_savedExtension)
  quit ..Start(1)
]]></Implementation>
</Method>

<Method name="StartTestChoice1ConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  set validChoices = $listbuild(1,2)  
  set invalidChoice = 1
  set choice = ""
  
  set labels(1) = "ENABLED"
  set labels(0) = "DISABLED"
  
  write !, "When this settings is enabled, Port will try to match the test class prefix and run the related test.", !!  
  
  while invalidChoice {
    if invalidChoice && (choice '= "") write "Invalid choice.", !!
    do Menu
  }
  
  if choice = 1 {
    do ##class(Port.SourceControl.Config).EnableTestOnDemand()
    write "Test on demand is now ENABLED."
  }
  
  if choice = 2 {
    do ##class(Port.SourceControl.Config).DisableTestOnDemand()
    write "Test on demand is now DISABLED."
  }
  
  write !!
  quit ..StartTestConfigAssistant(1)
  
Menu
  set choice = ""
  write "What do you want to do? (type the number)", !!
    
  write "1. Enable test on demand.", ! 
  write "2. Disable test on demand.", !!  
     
  set status = ##class(Port.SourceControl.Config).IsTestOnDemandEnabled()
  
  write "Test on demand is currently: "_labels(status), !!
  write "Your choice: "
  
  read choice
  set invalidChoice = ($listfind(validChoices, choice) = 0)
  write !
  quit
]]></Implementation>
</Method>

<Method name="StartTestChoice2ConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  
  write !, "A test class prefix is required to inform Port which package should be considered as a test package."
  write " Port uses this prefix when trying to find an equivalent implementation class."
  write !, "Ex: UnitTest.MyPackage.MyClass -> MyPackage.MyClass.", !!
  
  write "Please type the prefix below. Note that prefixes can also be composed.", !
  write "Ex: Package.UnitTest.", !!
  write "Default is: UnitTest", !
  write "Current is: "_##class(Port.SourceControl.Config).GetTestClassPrefix(), !
  write "New: "
  read prefix   
  
  do ##class(Port.SourceControl.Config).SetTestClassPrefix(prefix)
  write !!, "The prefix is now set to: "_##class(Port.SourceControl.Config).GetTestClassPrefix()_"."
  write !!
  quit ..StartTestConfigAssistant(1)
]]></Implementation>
</Method>

<Method name="StartTestChoice3ConfigAssistant">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  write !, "Defines the path where the each test classes should be exported."
  
  write !!, "You can use the following specific placeholders: ", !!
  
  write "{PROJECT} - The active project name.", !
  write "{NAMESPACE} - The active namespace name.", !
  write "{USERNAME} - The active user name.", !
  write "{INSTALLDIR} - The Caché installation directory.", !!
    
  write "Please type the RELATIVE path to be used when exporting your test files.", !
  write "You can use both: UNIX or Windows schemes.", !
  write "Test paths are relative to each project root.", !
  write "This is equivalent to: "_^Port.SourceControl.Settings("source.path"), !!
  
  write "You can use both: UNIX or Windows schemes.", !!
  write "Default is: ", !, "tests/cls", !
  write "Current is: ", !, $get(^Port.SourceControl.Settings("test.path")), !!
  write "New: ", !
  read path
   
  do ##class(Port.SourceControl.Config).SetTestPath(path)
  write !!, "The test path is now set to: "_^Port.SourceControl.Settings("test.path")_"."
  write !!
  quit ..StartTestConfigAssistant(1)
]]></Implementation>
</Method>
</Class>


<Class name="Port.TestUtils.MockProject">
<Super>%RegisteredObject</Super>
<TimeCreated>64239,32011.631107</TimeCreated>

<Parameter name="MOCKNAME">
<Default>Faux</Default>
</Parameter>

<Property name="Project">
<Type>%Studio.Project</Type>
</Property>

<Property name="ItemsList">
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Property name="FixtureDirectory">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>fixtureDir:%String,withFauxFiles:%Boolean=0,addToProject:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..FixtureDirectory = fixtureDir
  $$$QuitOnError(..Create(withFauxFiles, addToProject))
  quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnClose">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..Delete())
  quit $$$OK
]]></Implementation>
</Method>

<Method name="Delete">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if ##class(%Studio.Project).%ExistsId(..#MOCKNAME) {    
    $$$QuitOnError(##class(%Studio.Project).Delete(..#MOCKNAME))
    $$$QuitOnError(..DisposeFauxItems())
  }  
  quit $$$OK
]]></Implementation>
</Method>

<Method name="Create">
<FormalSpec>withFauxFiles:%Boolean=0,addToProject:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  $$$QuitOnError(..Delete())
  set ..Project = ##class(%Studio.Project).%New(..#MOCKNAME)
  set ..Project.Name = ..#MOCKNAME
  if withFauxFiles  $$$QuitOnError(..CreateFauxItems())
  if addToProject   $$$QuitOnError(..AddItemsToProject())
  set sc = ..Project.%Save()
  $$$QuitOnError(sc)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateFauxItems">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  #define TAB $char(9)
  #define GetAbsolutePath(%relative) ##class(%File).Normalize($System.Util.InstallDirectory, %relative)    
  set sc = $$$OK
  
  set fauxItems = 13
  set fauxItems(1)  = "Faux.Class.cls"
  set fauxItems(2)  = "fauxjs.js"
  set fauxItems(3)  = "fauxcss.css"
  set fauxItems(4)  = "fauxinc.inc"
  set fauxItems(5)  = "fauxmac.mac"
  set fauxItems(6)  = "fauxint.int"
  set fauxItems(7)  = "fauxmvi.mvi"
  set fauxItems(8)  = "fauxmvb.mvb"
  set fauxItems(9)  = "fauxbas.bas"
  set fauxItems(10) = "fauxdfi.dfi"
  set fauxItems(11) = "fauxcsp.csp"
  set fauxItems(12) = "fauxcsr.csr"
  set fauxItems(13) = "fauxhtml.html"
  
  for i=1:1:fauxItems {    
    set contentType = 0       
    set name = fauxItems(i)
    set ext = $piece(name, ".", *)
    set destination = name
    set absoluteFilePath = ##class(%File).NormalizeFilename(..FixtureDirectory_"/"_name)
    if '##class(%File).Exists(absoluteFilePath) continue
    if $lf($lfs("inc,mac,int,dfi,mvi,mvb,bas"), ext) {
      set file = ##class(%FileCharacterStream).%New()
      set file.Filename = absoluteFilePath
      if ##class(%RoutineMgr).Exists(name) {
        do ##class(%RoutineMgr).Delete(name)
      }
      set routine = ##class(%RoutineMgr).%OpenId(name)     
      set sc = routine.Code.CopyFrom(file)
      if $$$ISERR(sc) quit
      set sc = routine.Code.%Save()
      if $$$ISERR(sc) quit
      set routine = ""
      set contentType = 1
    } elseif ext = "cls" {
      set sc = ##class(%Compiler.UDL.TextServices).SetTextFromFile($namespace, ##class(%File).GetFilename(absoluteFilePath), absoluteFilePath)
      if $$$ISERR(sc) quit
    } else {
      set name = $extract($System.CSP.GetDefaultApp($namespace)_"/"_name, 2, *)
      set destination = ##class(Port.Project.Helper).CSPToAbsoluteAppPath(name)
      set sc = ##class(%File).CopyFile(absoluteFilePath, destination, 1, .o)
      if 'sc quit
      set contentType = 2
    }
    set i%ItemsList = $increment(i%ItemsList)
    set i%ItemsList(destination) = contentType
    set file = ""
  }
  quit sc
]]></Implementation>
</Method>

<Method name="DisposeFauxItems">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if $data(i%ItemsList) quit $$$OK
  set name = ""
  for {
    set name = $order(i%ItemsList(name), 1, type)
    quit:name=""
    
    if type = 1 do ##class(%Routine).Delete(name)
    if type = 2 do $System.OBJ.Delete(name)
    if type = 3 do ##class(%File).Delete($System.Util.InstallDirectory()_"/csp/"_$$$lcase($namespace)_"/name")
  }
  quit $$$OK
]]></Implementation>
</Method>

<Method name="AddItemsToProject">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set name = ""
  for {    
    set name = $order(i%ItemsList(name))
    quit:name=""
    
    do ..Project.AddItem(name)
  }
  quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Port.UnitTest.Manager">
<Super>%UnitTest.Manager</Super>
<TimeCreated>64306,34529.705584</TimeCreated>

<Method name="Root">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[  quit ##class(%File).NormalizeFilename(##class(Port.SourceControl.Config).GetWorkspace())
]]></Implementation>
</Method>
</Class>


<Class name="Port.UnitTest.TestCase">
<Super>%UnitTest.TestCase</Super>
<TimeCreated>64306,34529.790238</TimeCreated>

<Method name="GetTestDirectory">
<FormalSpec>filePath:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
  set testPath = ##class(Port.SourceControl.Config).GetTestPath()
  quit ##class(%File).NormalizeFilename(..Manager.Root()_"/"_testPath_"/"_filePath)
]]></Implementation>
</Method>
</Class>


<Class name="UnitTest.Port.Project.Base">
<Super>Port.UnitTest.TestCase,Port.TestUtils.MockProject</Super>
<TimeCreated>64426,56009.814762</TimeCreated>

<Parameter name="MOCKNAME">
<Default>TestProject</Default>
</Parameter>

<Property name="BaseInstance">
<Type>Port.Project.Base</Type>
</Property>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..BaseInstance = ##class(Port.Project.Base).%New("/CacheProjects/"_$namespace_"/"_..#MOCKNAME)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..Create())
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$QuitOnError(..Delete())
  do ##class(%File).RemoveDirectoryTree("/CacheProjects/"_$namespace_"/"_..#MOCKNAME)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="TestPropertyDefinition">
<Implementation><![CDATA[
  
  #define CheckProperty(%propName)  ##class(%Dictionary.PropertyDefinition).%ExistsId("Port.Project.Base||"_%propName)
  
  for prop="Logger","ProjectName","Project","Slash","BasePath","IncPath","ClassPath","IntPath","MacPath","WebPath","MvbPath","MviPath","BasPath","DfiPath","AffectedCount","IsBatch","Overwrite","LogLevel" {
    do $$$AssertEquals($$$CheckProperty(prop), 1, "Property "_prop_" should exist.")
  }
]]></Implementation>
</Method>

<Method name="TestGetProjectName">
<Implementation><![CDATA[  do $$$AssertEquals(..BaseInstance.GetProjectName(), ..#MOCKNAME, "Should return the project name")
]]></Implementation>
</Method>

<Method name="TestCheckUbiquity">
<Implementation><![CDATA[
   
  set port = ##class(%Studio.Project).%OpenId("port")
  set baseInstance = ##class(Port.Project.Base).%New("/CacheProjects/"_$namespace_"/port")      
  $$$ThrowOnError(port.CreateClone("faux"))
  set faux = ##class(%Studio.Project).%OpenId("faux")
  do faux.Unlock()  
  do baseInstance.CheckUbiquity(.uList)
  set id = ""
  for {
    set id = $order(uList(id), 1, itemData)
    quit:id=""
    
    set itemName = $listget(itemData, 1)    
    set portIdExists = (port.Items.FindObjectId($replace(id, "faux", "port")) '= "")
    set fauxIdExists = (faux.Items.FindObjectId(id) '= "")    
    
    do $$$AssertEquals(portIdExists && fauxIdExists, 1, itemName_" should be ubiquous.")
  }
  
  do ##class(%Studio.Project).%DeleteId("faux")
]]></Implementation>
</Method>

<Method name="TestIsOutdated">
<Implementation><![CDATA[
  
 set fauxPath = "/CacheProjects/"_$namespace_"/faux"
 set faux = ##class(%Studio.Project).%New("faux")
 do faux.%Save()
 
 set base = ##class(Port.Project.Base).%New(fauxPath)
 set routine = ##class(%Routine).%New("sayhey.mac")
 
 do Execute(1)
 do Execute(0)

Execute(expected)
  if expected = 1 {
    do CreateFile
    do $$$LogMessage("Creating a 2 seconds gap ...")
    hang 2
    do CreateRoutine
  } else {
    do CreateRoutine
    do $$$LogMessage("Creating a 2 seconds gap ...")
    hang 2
    do CreateFile
  }  
  do $$$AssertEquals(base.IsOutdated("sayhey.mac", fauxPath_"/mac/sayhey.mac.txt", 0), expected, "Should be "_$case(expected, 1: "outdated", :"up-to-date.")_".")
  do ##class(%File).RemoveDirectoryTree(fauxPath)
  do ##class(%Routine).Delete("sayhey.mac")
  quit
  
CreateRoutine
  do routine.Clear()  
  do routine.WriteLine("test")
  do routine.WriteLine($char(9)_"write ""hey!""")
  do routine.WriteLine($char(9)_"quit")
  do routine.%Save()
  
  do faux.AddItem("sayhey.mac")
  do faux.%Save()
  quit
  
CreateFile
  do ##class(%File).CreateDirectoryChain(fauxPath_"/mac")
  set fs = ##class(%FileCharacterStream).%New()
  set fs.Filename = fauxPath_"/mac/sayhey.mac.txt"
  do fs.CopyFrom(routine)
  do fs.%Save()
  quit
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
   set ^||%Studio.Project = "port"
   set projectPath = ##class(Port.SourceControl.Config).GetExportPath()
   set shouldOverwrite = '##class(Port.SourceControl.Config).IsSameSourceExtension()
   if shouldOverwrite do ##class(Port.SourceControl.Config).TrackActiveExtension()
   set ignoredPaths = ##class(Port.SourceControl.Util).GetIgnoredPaths(projectPath)     
   set sc = ##class(Port.Project.Manager).Export(projectPath, 2, 0, ignoredPaths, "txt")
   quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="UnitTest.Port.Project.Exporter">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64426,56009.879156</TimeCreated>

<Property name="Exporter">
<Type>Port.Project.Exporter</Type>
</Property>

<Property name="BasePath">
<Type>%String</Type>
<InitialExpression>"/CacheProjects/DEV/port"</InitialExpression>
</Property>

<Property name="Project">
<Type>%Studio.Project</Type>
</Property>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  if '$data(^||%Studio.Project) set ^||%Studio.Project = "port"
  set ..Project = ##class(Port.TestUtils.MockProject).%New(..GetTestDirectory("fixtures/import"), 1,1)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  do ..Project.Delete()
  quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeOneTest">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ..Exporter = ##class(Port.Project.Exporter).%New(..BasePath)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="TestExport">
<Implementation><![CDATA[
   
  set fauxItems = 12
  set fauxItems(1)  = "Faux.Class.cls"
  set fauxItems(2)  = "fauxjs.js"
  set fauxItems(3)  = "fauxcss.css"
  set fauxItems(4)  = "fauxinc.inc"
  set fauxItems(5)  = "fauxmac.mac"
  set fauxItems(6)  = "fauxint.int"
  set fauxItems(7)  = "fauxmvi.mvi"
  set fauxItems(8)  = "fauxmvb.mvb"
  set fauxItems(9)  = "fauxbas.bas"
  set fauxItems(10) = "fauxdfi.dfi"
  set fauxItems(11) = "fauxcsp.csp"
  set fauxItems(12) = "fauxcsr.csr"
  set fauxItems(13) = "fauxhtml.html"
  
  set types = $lfs("cls,int,mac,inc,web,bas,mvb,mvi")
  do $$$AssertStatusOK(..Exporter.Export(), "Should call Export() without issues.") 
  
  set itemsCount = ..Project.Items.Count()
  for i=1:1:itemsCount {  
    set item = ..Project.Items.GetAt(i)
    if item.Type '= "CLS" {         
      set filePath = ..BasePath_"/"_$zcvt($select(item.Name [ ".INC" :$piece(item.Name, ".", 2), 1:item.Type), "L")_"/"_$piece(item.Name, ".")_"."_$zcvt($piece(item.Name, ".", 2), "L")
    } else {
      set filePath = $replace(..BasePath_"/cls/"_item.Name, ".", "/")_".cls"
    }
    if item.Type '= "CSP" set filePath = filePath_".txt"
    set filePath = ##class(%File).NormalizeFilename(filePath)
    do $$$AssertEquals(##class(%File).Exists(filePath), 1, filePath_" should exist")
  }
]]></Implementation>
</Method>
</Class>


<Class name="UnitTest.Port.Project.Helper">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64426,56009.948567</TimeCreated>

<Parameter name="MOCKAPPNAME">
<Default>/unittest/mockapp</Default>
</Parameter>

<Method name="TestImplyDirectoryCreation">
<Implementation><![CDATA[
  set sc = ##class(Port.Project.Helper).ImplyDirectoryCreation("/temp/dummy/foo/bar")
  do $$$AssertStatusOK(sc, "creates the directory /temp/dummy/foo/bar.")
  
  do ##class(%File).RemoveDirectoryTree("/temp/dummy/foo/bar")
  
  set sc = ##class(Port.Project.Helper).ImplyDirectoryCreation("/temp/dummy/foo:bar_¨¨sdd")
  do $$$AssertStatusNotOK(sc, "fails gracefully if some OS error happens.")
]]></Implementation>
</Method>

<Method name="TestIsRoutine">
<Implementation><![CDATA[
  #define IsRoutine(%dummyRoutine) ##class(Port.Project.Helper).IsRoutine(%dummyRoutine)
  
  do $$$AssertTrue($$$IsRoutine("dummy.inc"), "expects inc to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.int"), "expects int to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.mac"), "expects mac to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.mvb"), "expects mvb to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.bas"), "expects bas to be a routine.")
  
  do $$$AssertNotTrue($$$IsRoutine("dummy.txt"), "expects txt to not be a routine.")
  do $$$AssertNotTrue($$$IsRoutine("dummy.csp"), "expects csp to not be a routine.")
  do $$$AssertNotTrue($$$IsRoutine("dummy.cls"), "expects cls to not be a routine.")
]]></Implementation>
</Method>

<Method name="TestCSPLogicalToPhysicalPath">
<Implementation><![CDATA[
  #define CSPLogicalToPhysicalPath(%CSPItem, %path, %ns) set sc = ##class(Port.Project.Helper).CSPLogicalToPhysicalPath(%CSPItem, %path, %ns)
  #define Normalize(%path) ##class(%File).NormalizeFilename(%path)
  
  set sc = $$$OK
  set expectedPath = $$$Normalize($System.Util.InstallDirectory()_"csp/"_$$$lcase($namespace)_"/dummyfile.js")
  
  do $$$LogMessage("Creating mock application ...")
  
  set sc = ..CreateMockApplication()  
  
  if $$$ISERR(sc) {
    do $$$LogMessage("Unable to create mock application. Aborting current test ...")
    do $$$LogMessage("Reason: "_$System.Status.GetErrorText(sc))
    do $$$AssertStatusOK(sc, "should have created the mock app.")
    quit
  } else {
    do $$$LogMessage("Mock application created with success.")
  }
  
  $$$CSPLogicalToPhysicalPath("unittest/mockapp/dummyfile.js", .resolvedPath, $namespace)
  do $$$LogMessage("Resulting physical path is: "_resolvedPath)
  
  do $$$AssertEquals(resolvedPath, expectedPath, "resolves dummyfile.js's physical path.")
  
  set expectedPath = $$$Normalize($System.Util.InstallDirectory()_"csp/"_$$$lcase($namespace)_"/subpath/dummyfile.js")
  
  $$$CSPLogicalToPhysicalPath("unittest/mockapp/subpath/dummyfile.js", .resolvedPath, $namespace)
  do $$$LogMessage("Resulting physical path is: "_resolvedPath)
  
  do $$$AssertEquals(resolvedPath, expectedPath, "resolves subpath/dummyfile.js's physical path.")
  
  set sc = ..DestroyMockApplication()
  
  if $$$ISERR(sc) {
    do $$$LogMessage("Unable to destroy mock application.")
    do $$$LogMessage("Reason: "_$System.Status.GetErrorText(sc))
    do $$$AssertStatusOK(sc, "destroys the mock app.")
  } else {
    do $$$LogMessage("Mock application destroyed with success.")
  }
  
  $$$CSPLogicalToPhysicalPath("unittest/mockapp/dummyfile.js", .absolutePath, "dummyns")
  do $$$AssertStatusNotOK(sc, "returns a status code indicating that the current namespace doesn't have an application.")
]]></Implementation>
</Method>

<Method name="TestClassToFile">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
   for i="txt","whatever","composed.txt","" {
     set assertionSufix = $select(i="" : "nothing", 1: i)_"."
     do ..AssertTestClassToFile(i, assertionSufix)
   }
]]></Implementation>
</Method>

<Method name="TestFileToClass">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
   for i="txt","whatever","composed.txt","" {
     set assertionSufix = $select(i="" : "nothing", 1: i)_"."     
     do ..AssertTestFileToClass(i, assertionSufix)
   }
]]></Implementation>
</Method>

<Method name="TestGetItemExtension">
<Implementation><![CDATA[
  set dummy = "dummy"
  set index = 0
  set extensions = $listbuild(".inc",".int",".mac",".txt.cls",".dfi",".bas",".mvi",".mvb")
  for expected = "INC","INT","MAC","CLS","DFI","BAS","MVI","MVB" {
    set index = index + 1
    set extension = $listget(extensions, index)
    do $$$AssertEquals(##class(Port.Project.Helper).GetItemExtension(dummy_extension), expected, "dummy"_extension_" should match "_expected_".")
  }
]]></Implementation>
</Method>

<Method name="TestDescribe">
<Implementation><![CDATA[
  set dummy = "dummy"
  set index = 0
  set extensions = $listbuild(".inc",".int",".mac",".cls",".dfi",".bas",".mvi",".mvb", ".js", ".html", ".css")
  
  for i=1:1:$listlength(extensions) {    
    set extension = $listget(extensions, i)
    set inputName = dummy_extension
    set isRoutine = ##class(Port.Project.Helper).IsRoutine(dummy_extension)
    set expectedType = $case(extension, 
      ".inc": "MAC",
      ".int": "MAC",
      ".mac": "MAC",
      ".bas": "MAC",
      ".bas": "MAC",
      ".mvi": "MAC",
      ".cls": "CLS",
      ".dfi": "DFI",
      ".mvb": "MVB",
      : "CSP"
    )    
    
    set expectedExtension = $$$ucase($piece(extension, ".", *))
    set expectedItemName = dummy_$select(extension = ".cls" : "", isRoutine :"."_expectedExtension, 1: extension)
        
    do ##class(Port.Project.Helper).Describe(inputName, .ext, .type, .itemName)
    
    do $$$AssertEquals(type, expectedType, inputName_" resolves to type "_expectedType_".")
    do $$$AssertEquals(ext, expectedExtension, inputName_" resolves to extension "_expectedExtension_".")
    do $$$AssertEquals(itemName, expectedItemName, inputName_" resolves the name to "_expectedItemName_".")
  }
]]></Implementation>
</Method>

<Method name="TestCSPPhysicalToLogicalPath">
<Implementation><![CDATA[
  set input = ##class(%File).NormalizeFilename("/foo/web/bar/dummy.txt")
  set expectedResult = $e($System.CSP.GetDefaultApp($namespace)_"/bar/dummy.txt", 2, *)
  
  set sc = ##class(Port.Project.Helper).CSPPhysicalToLogicalPath(input, .logicalPath)
  do $$$AssertStatusOK(sc, "returns the logical path without errors.")
    
  do $$$AssertEquals(logicalPath, expectedResult, "resolves the path to logical.")
  
  set sc = ##class(Port.Project.Helper).CSPPhysicalToLogicalPath(input, .logicalPath, "dummyns")  
  do $$$AssertStatusNotOK(sc, "returns an error when called with an invalid namespace.")
  
  set sc = ##class(Port.Project.Helper).CSPPhysicalToLogicalPath("/foo/bar/dummy.txt", .logicalPath)
  do $$$AssertStatusNotOK(sc, "returns an error when called with an invalid namespace.")
]]></Implementation>
</Method>

<Method name="AssertTestClassToFile">
<FormalSpec>extension:%String="",assertionSuffix:%String</FormalSpec>
<Implementation><![CDATA[
  set slash = $select($$$isWINDOWS : "\", 1: "/")
  set basePath = "/CacheProjects/MOCKNS/mockproject/cls"
  set input = "MockApp.Package.Test"
  set expected = ##class(%File).NormalizeFilename(basePath_"/MockApp/Package/Test.cls."_extension)
  
  set result = ##class(Port.Project.Helper).ClassToFile(basePath, input, extension)
  do $$$AssertEquals(result, expected, "resolves correctly the class when the extension is "_assertionSuffix_".")
]]></Implementation>
</Method>

<Method name="AssertTestFileToClass">
<FormalSpec>extension:%String="",assertionSuffix:%String</FormalSpec>
<Implementation><![CDATA[
  set input = "/CacheProjects/"_$namespace_"/MockProject/cls/MockApp/Package/Test.cls."_extension
  set expectedOutput = "MockApp.Package.Test"
  set result = ##class(Port.Project.Helper).FileToClass(input, extension)
  
  do $$$AssertEquals(result, expectedOutput, "resolves the source file to Caché class name when extension is "_assertionSuffix)
]]></Implementation>
</Method>

<Method name="CreateMockApplication">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ns = $namespace
  new $namespace
  
  set $namespace = "%SYS"
  set properties("Path") = ##class(%File).NormalizeFilename($System.Util.InstallDirectory()_"csp/mockapp")
  set properties("NameSpace") = ns
  set properties("IsNameSpaceDefault") = 1
  
  if ##class(Security.Applications).Exists(..#MOCKAPPNAME) {
    $$$QuitOnError(..DestroyMockApplication())
  }
  set sc = ##class(Security.Applications).Create("/unittest/mockapp", .properties)
  quit sc
]]></Implementation>
</Method>

<Method name="DestroyMockApplication">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set ns = $namespace
  new $namespace
  
  set $namespace = "%SYS"
  do ##class(%File).RemoveDirectoryTree($System.Util.InstallDirectory()_"csp/mockapp")
  quit ##class(Security.Applications).Delete(..#MOCKAPPNAME)
]]></Implementation>
</Method>
</Class>


<Project name="port" LastModified="2017-06-20 09:31:51.105879" Target="##class(UnitTest.Port.Manifest).GetAllFiles()" TargetType="2" HttpServer="http://localhost:57772">
  <Items>
    <ProjectItem name="Port.Logger" type="CLS"></ProjectItem>
    <ProjectItem name="Port.MAC" type="MAC"></ProjectItem>
    <ProjectItem name="Port.Project.Backup" type="CLS"></ProjectItem>
    <ProjectItem name="Port.Project.Base" type="CLS"></ProjectItem>
    <ProjectItem name="Port.Project.Exporter" type="CLS"></ProjectItem>
    <ProjectItem name="Port.Project.Helper" type="CLS"></ProjectItem>
    <ProjectItem name="Port.Project.Importer" type="CLS"></ProjectItem>
    <ProjectItem name="Port.Project.Manager" type="CLS"></ProjectItem>
    <ProjectItem name="Port.Project.XMLExporter" type="CLS"></ProjectItem>
    <ProjectItem name="Port.REST.API" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.Config" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.Hooks" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.Installer" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.Log" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.LogCleaner" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.Util" type="CLS"></ProjectItem>
    <ProjectItem name="Port.SourceControl.Wizard" type="CLS"></ProjectItem>
    <ProjectItem name="Port.TestUtils.MockProject" type="CLS"></ProjectItem>
    <ProjectItem name="Port.UnitTest.Manager" type="CLS"></ProjectItem>
    <ProjectItem name="Port.UnitTest.TestCase" type="CLS"></ProjectItem>
    <ProjectItem name="UnitTest.Port.Project.Base" type="CLS"></ProjectItem>
    <ProjectItem name="UnitTest.Port.Project.Exporter" type="CLS"></ProjectItem>
    <ProjectItem name="UnitTest.Port.Project.Helper" type="CLS"></ProjectItem>
    <ProjectItem name="portutils.INC" type="MAC"></ProjectItem>
  </Items>
  <BreakPoints>
    <BreakPoint Routine="UnitTest.Port.Manifest.CLS" Offset="GetAllFiles+4"></BreakPoint>
  </BreakPoints>
</Project>


<Routine name="portutils" type="INC"><![CDATA[
#define ImportTypes           $listbuild("INC", "INT", "CLS", "MAC", "MVI", "MVB", "BAS", "DFI", "CSR", "CSP")
#define ImportTypeDescriptions $listbuild("include files", "intermediate routines", "classes", "macro routines",  "MV Intermediate routines", "MV Basic routines", "Basic routines", "DFI XML", "CSP Rules", "files")
#define RoutineExtensions     $listbuild(".MAC", ".INT", ".INC", ".MVB", ".MVI", ".BAS", ".DFI")
]]></Routine>
</Export>
