Class UnitTest.Port.Manifest Extends Port.UnitTest.TestCase
{

Method TestRead()
{
  
  set nonExistentStatus = ##class(Port.Manifest).Read(..GetTestDirectory("fixtures/manifest/dummydir/nothing"), .manifest)
  set invalidStatus = ##class(Port.Manifest).Read(..GetTestDirectory("fixtures/manifest/broken.json"), .manifest)
  set validStatus = ##class(Port.Manifest).Read(..GetTestDirectory("fixtures/manifest/port.json"), .manifest)
  
  do $$$AssertStatusOK(nonExistentStatus, "quits normally if manifest doesn't exists.")     
  do $$$AssertStatusOK(validStatus, "returns OK if manifest was found and is valid.")
  do $$$AssertStatusNotOK(invalidStatus, "catches exception if json is broken.")
  
  do $$$AssertTrue(manifest.%IsA("Port.Manifest"), "generates a Port.Manifest instance.")  
  
  do $$$AssertTrue(manifest.dependencies.%IsA("%DynamicObject"), "dependencies is a %DynamicObject.")  
  do $$$AssertEquals(manifest.dependencies."dummy-project", "git+ssh://git@github.com/rfns/port.git", "matches the URL.")
  
  do $$$AssertTrue(manifest.ignore.%IsA("%DynamicArray"), "ignore is a %DynamicArray.")
  do $$$AssertNotEquals(manifest.ignore.%Get(0), "", "has a path inside.")
}

ClassMethod Call()
{
  set ^||%Studio.Project = "port"
  do ##class(Port.UnitTest.Manager).DebugRunTestCase(##class(Port.SourceControl.Config).GetTestPath(), "UnitTest.Port.Manifest")
}

}

