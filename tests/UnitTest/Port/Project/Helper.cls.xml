<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="UnitTest.Port.Project.Helper">
<Super>Port.UnitTest.TestCase</Super>
<TimeCreated>64426,56009.948567</TimeCreated>

<Parameter name="MOCKAPPNAME">
<Default>/unittest/mockapp</Default>
</Parameter>

<Method name="TestImplyDirectoryCreation">
<Implementation><![CDATA[
  set sc = ##class(Port.Project.Helper).ImplyDirectoryCreation("/temp/dummy/foo/bar")
  do $$$AssertStatusOK(sc, "creates the directory /temp/dummy/foo/bar.")
  
  do ##class(%File).RemoveDirectoryTree("/temp/dummy/foo/bar")
  
  set sc = ##class(Port.Project.Helper).ImplyDirectoryCreation("/temp/dummy/foo:bar_¨¨sdd")
  do $$$AssertStatusNotOK(sc, "fails gracefully if some OS error happens.")
]]></Implementation>
</Method>

<Method name="TestIsRoutine">
<Implementation><![CDATA[
  #define IsRoutine(%dummyRoutine) ##class(Port.Project.Helper).IsRoutine(%dummyRoutine)
  
  do $$$AssertTrue($$$IsRoutine("dummy.inc"), "expects inc to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.int"), "expects int to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.mac"), "expects mac to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.mvb"), "expects mvb to be a routine.")
  do $$$AssertTrue($$$IsRoutine("dummy.bas"), "expects bas to be a routine.")
  
  do $$$AssertNotTrue($$$IsRoutine("dummy.txt"), "expects txt to not be a routine.")
  do $$$AssertNotTrue($$$IsRoutine("dummy.csp"), "expects csp to not be a routine.")
  do $$$AssertNotTrue($$$IsRoutine("dummy.cls"), "expects cls to not be a routine.")
]]></Implementation>
</Method>

<Method name="TestCSPLogicalToPhysicalPath">
<Implementation><![CDATA[
  #define CSPLogicalToPhysicalPath(%CSPItem, %path) set sc = ##class(Port.Project.Helper).CSPLogicalToPhysicalPath(%CSPItem, %path)
  #define Normalize(%path) ##class(%File).NormalizeFilename(%path)
  
  set sc = $$$OK
  set expectedPath = $$$Normalize($System.Util.InstallDirectory()_"csp/"_$$$lcase($namespace)_"/dummyfile.js")
  
  do $$$LogMessage("Creating mock application ...")
  
  set sc = ..CreateMockApplication()  
  
  if $$$ISERR(sc) {
    do $$$LogMessage("Unable to create mock application. Aborting current test ...")
    do $$$LogMessage("Reason: "_$System.Status.GetErrorText(sc))
    do $$$AssertStatusOK(sc, "should have created the mock app.")
    quit
  } else {
    do $$$LogMessage("Mock application created with success.")
  }
  
  $$$CSPLogicalToPhysicalPath("unittest/mockapp/dummyfile.js", .resolvedPath)
  do $$$LogMessage("Resulting physical path is: "_resolvedPath)
  
  do $$$AssertEquals(resolvedPath, expectedPath, "resolves dummyfile.js's physical path.")
  
  set expectedPath = $$$Normalize($System.Util.InstallDirectory()_"csp/"_$$$lcase($namespace)_"/subpath/dummyfile.js")
  
  $$$CSPLogicalToPhysicalPath("unittest/mockapp/subpath/dummyfile.js", .resolvedPath)
  do $$$LogMessage("Resulting physical path is: "_resolvedPath)
  
  do $$$AssertEquals(resolvedPath, expectedPath, "resolves subpath/dummyfile.js's physical path.")
  
  set sc = ..DestroyMockApplication()
  
  if $$$ISERR(sc) {
    do $$$LogMessage("Unable to destroy mock application.")
    do $$$LogMessage("Reason: "_$System.Status.GetErrorText(sc))
    do $$$AssertStatusOK(sc, "destroys the mock app.")
  } else {
    do $$$LogMessage("Mock application destroyed with success.")
  }
  
  $$$CSPLogicalToPhysicalPath("unittest/mockapp/dummyfile.js", .absolutePath)
  do $$$AssertStatusNotOK(sc, "returns a status code indicating that the current namespace doesn't have an application.")
]]></Implementation>
</Method>

<Method name="TestClassToFile">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
   for i="txt","whatever","composed.txt","" {
     set assertionSufix = $select(i="" : "nothing", 1: i)_"."
     do ..AssertTestClassToFile(i, assertionSufix)
   }
]]></Implementation>
</Method>

<Method name="TestFileToClass">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
   for i="txt","whatever","composed.txt","" {
     set assertionSufix = $select(i="" : "nothing", 1: i)_"."     
     do ..AssertTestFileToClass(i, assertionSufix)
   }
]]></Implementation>
</Method>

<Method name="TestGetItemExtension">
<Implementation><![CDATA[
  set dummy = "dummy"
  set index = 0
  set extensions = $listbuild(".inc",".int",".mac",".txt.cls",".dfi",".bas",".mvi",".mvb")
  for expected = "INC","INT","MAC","CLS","DFI","BAS","MVI","MVB" {
    set index = index + 1
    set extension = $listget(extensions, index)
    do $$$AssertEquals(##class(Port.Project.Helper).GetItemExtension(dummy_extension), expected, "dummy"_extension_" should match "_expected_".")
  }
]]></Implementation>
</Method>

<Method name="TestDescribe">
<Implementation><![CDATA[
  set dummy = "dummy"
  set index = 0
  set extensions = $listbuild(".inc",".int",".mac",".cls",".dfi",".bas",".mvi",".mvb", ".js", ".html", ".css")
  
  for i=1:1:$listlength(extensions) {    
    set extension = $listget(extensions, i)
    set inputName = dummy_extension
    set isRoutine = ##class(Port.Project.Helper).IsRoutine(dummy_extension)
    set expectedType = $case(extension, 
      ".inc": "MAC",
      ".int": "MAC",
      ".mac": "MAC",
      ".bas": "MAC",
      ".bas": "MAC",
      ".mvi": "MAC",
      ".cls": "CLS",
      ".dfi": "DFI",
      ".mvb": "MVB",
      : "CSP"
    )    
    
    set expectedExtension = $$$ucase($piece(extension, ".", *))
    set expectedItemName = dummy_$select(extension = ".cls" : "", isRoutine :"."_expectedExtension, 1: extension)
        
    do ##class(Port.Project.Helper).Describe(inputName, .ext, .type, .itemName)
    
    do $$$AssertEquals(type, expectedType, inputName_" resolves to type "_expectedType_".")
    do $$$AssertEquals(ext, expectedExtension, inputName_" resolves to extension "_expectedExtension_".")
    do $$$AssertEquals(itemName, expectedItemName, inputName_" resolves the name to "_expectedItemName_".")
  }
]]></Implementation>
</Method>

<Method name="TestCSPPhysicalToLogicalPath">
<Implementation><![CDATA[
  set input = ##class(%File).NormalizeFilename("/foo/web/bar/dummy.txt")
  set expectedResult = $e($System.CSP.GetDefaultApp($namespace)_"/bar/dummy.txt", 2, *)
  
  set sc = ##class(Port.Project.Helper).CSPPhysicalToLogicalPath(input, .logicalPath)
  do $$$AssertStatusOK(sc, "returns the logical path without errors.")
    
  do $$$AssertEquals(logicalPath, expectedResult, "resolves the path to logical.")
  
  set sc = ##class(Port.Project.Helper).CSPPhysicalToLogicalPath(input, .logicalPath, "dummyns")  
  do $$$AssertStatusNotOK(sc, "returns an error when called with an invalid namespace.")
]]></Implementation>
</Method>

<Method name="AssertTestClassToFile">
<FormalSpec>extension:%String="",assertionSuffix:%String</FormalSpec>
<Implementation><![CDATA[
  set slash = $select($$$isWINDOWS : "\", 1: "/")
  set basePath = "/CacheProjects/MOCKNS/mockproject/cls"
  set input = "MockApp.Package.Test"
  set expected = ##class(%File).NormalizeFilename(basePath_"/MockApp/Package/Test.cls."_extension)
  
  set result = ##class(Port.Project.Helper).ClassToFile(basePath, input, extension)
  do $$$AssertEquals(result, expected, "resolves correctly the class when the extension is "_assertionSuffix_".")
]]></Implementation>
</Method>

<Method name="AssertTestFileToClass">
<FormalSpec>extension:%String="",assertionSuffix:%String</FormalSpec>
<Implementation><![CDATA[
  set input = "/CacheProjects/"_$namespace_"/MockProject/cls/MockApp/Package/Test.cls."_extension
  set expectedOutput = "MockApp.Package.Test"
  set result = ##class(Port.Project.Helper).FileToClass(input, extension)
  
  do $$$AssertEquals(result, expectedOutput, "resolves the source file to Caché class name when extension is "_assertionSuffix)
]]></Implementation>
</Method>

<Method name="CreateMockApplication">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set ns = $namespace
  new $namespace
  
  set $namespace = "%SYS"
  set properties("Path") = ##class(%File).NormalizeFilename($System.Util.InstallDirectory()_"csp/mockapp")
  set properties("NameSpace") = ns
  set properties("IsNameSpaceDefault") = 1
  
  if ##class(Security.Applications).Exists(..#MOCKAPPNAME) {
    $$$QuitOnError(..DestroyMockApplication())
  }
  set sc = ##class(Security.Applications).Create("/unittest/mockapp", .properties)
  quit sc
]]></Implementation>
</Method>

<Method name="DestroyMockApplication">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
  set ns = $namespace
  new $namespace
  
  set $namespace = "%SYS"
  do ##class(%File).RemoveDirectoryTree($System.Util.InstallDirectory()_"csp/mockapp")
  quit ##class(Security.Applications).Delete(..#MOCKAPPNAME)
]]></Implementation>
</Method>
</Class>
</Export>
